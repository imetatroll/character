package beyond

// https://transform.tools/json-to-go
//
// - Replaced *AutoGenerated* with *Character*
// - Add js:"some-tag" tags that match the existing json:"some-tag" tags
// - Add *js.Object as the first entry to every struct
// - Add IsJsEnv variable just below the first *js.Object variable
// It is a very manual process unforunately

import "github.com/gopherjs/gopherjs/js"

type Character struct {
	*js.Object

	// When true, methods.go will reflect on []int type values and
	// fall back to js.Keys(obj.Get("Name")) + obj.Get("Name").Index("0")
	// logic in order to work around internal library issues.
	IsJsEnv bool

	// extracted using https://transform.tools/json-to-go
	ID      int    `json:"id"`
	Success bool   `json:"success"`
	Message string `json:"message"`
	Data    struct {
		ID                         int         `json:"id"`
		ReadonlyURL                string      `json:"readonlyUrl"`
		AvatarURL                  interface{} `json:"avatarUrl"`
		FrameAvatarURL             interface{} `json:"frameAvatarUrl"`
		BackdropAvatarURL          interface{} `json:"backdropAvatarUrl"`
		SmallBackdropAvatarURL     interface{} `json:"smallBackdropAvatarUrl"`
		LargeBackdropAvatarURL     interface{} `json:"largeBackdropAvatarUrl"`
		ThumbnailBackdropAvatarURL interface{} `json:"thumbnailBackdropAvatarUrl"`
		DefaultBackdrop            struct {
			BackdropAvatarURL          string `json:"backdropAvatarUrl"`
			SmallBackdropAvatarURL     string `json:"smallBackdropAvatarUrl"`
			LargeBackdropAvatarURL     string `json:"largeBackdropAvatarUrl"`
			ThumbnailBackdropAvatarURL string `json:"thumbnailBackdropAvatarUrl"`
		} `json:"defaultBackdrop"`
		AvatarID                  interface{} `json:"avatarId"`
		FrameAvatarID             interface{} `json:"frameAvatarId"`
		BackdropAvatarID          interface{} `json:"backdropAvatarId"`
		SmallBackdropAvatarID     interface{} `json:"smallBackdropAvatarId"`
		LargeBackdropAvatarID     interface{} `json:"largeBackdropAvatarId"`
		ThumbnailBackdropAvatarID interface{} `json:"thumbnailBackdropAvatarId"`
		ThemeColorID              int         `json:"themeColorId"`
		ThemeColor                struct {
			BackgroundColor string      `json:"backgroundColor"`
			ClassID         int         `json:"classId"`
			Name            string      `json:"name"`
			RaceID          interface{} `json:"raceId"`
			SubRaceID       interface{} `json:"subRaceId"`
			Tags            []string    `json:"tags"`
			ThemeColor      string      `json:"themeColor"`
			ThemeColorID    int         `json:"themeColorId"`
			DecorationKey   interface{} `json:"decorationKey"`
		} `json:"themeColor"`
		Name               string      `json:"name"`
		SocialName         interface{} `json:"socialName"`
		Gender             string      `json:"gender"`
		Faith              string      `json:"faith"`
		Age                int         `json:"age"`
		Hair               string      `json:"hair"`
		Eyes               string      `json:"eyes"`
		Skin               string      `json:"skin"`
		Height             string      `json:"height"`
		Weight             int         `json:"weight"`
		Inspiration        bool        `json:"inspiration"`
		BaseHitPoints      int         `json:"baseHitPoints"`
		BonusHitPoints     interface{} `json:"bonusHitPoints"`
		OverrideHitPoints  interface{} `json:"overrideHitPoints"`
		RemovedHitPoints   int         `json:"removedHitPoints"`
		TemporaryHitPoints int         `json:"temporaryHitPoints"`
		CurrentXp          int         `json:"currentXp"`
		AlignmentID        int         `json:"alignmentId"`
		LifestyleID        int         `json:"lifestyleId"`
		Stats              []struct {
			ID    int         `json:"id"`
			Name  interface{} `json:"name"`
			Value int         `json:"value"`
		} `json:"stats"`
		BonusStats []struct {
			ID    int         `json:"id"`
			Name  interface{} `json:"name"`
			Value int         `json:"value"`
		} `json:"bonusStats"`
		OverrideStats []struct {
			ID    int         `json:"id"`
			Name  interface{} `json:"name"`
			Value interface{} `json:"value"`
		} `json:"overrideStats"`
		Background struct {
			CustomBackground struct {
				BackgroundType                        interface{} `json:"backgroundType"`
				CharacteristicsBackground             interface{} `json:"characteristicsBackground"`
				CharacteristicsBackgroundDefinitionID interface{} `json:"characteristicsBackgroundDefinitionId"`
				Description                           interface{} `json:"description"`
				EntityTypeID                          int         `json:"entityTypeId"`
				FeaturesBackground                    interface{} `json:"featuresBackground"`
				FeaturesBackgroundDefinitionID        interface{} `json:"featuresBackgroundDefinitionId"`
				ID                                    int         `json:"id"`
				Name                                  interface{} `json:"name"`
			} `json:"customBackground"`
			Definition struct {
				AvatarURL interface{} `json:"avatarUrl"`
				Bonds     []struct {
					Description string `json:"description"`
					DiceRoll    int    `json:"diceRoll"`
					ID          int    `json:"id"`
				} `json:"bonds"`
				ContractsDescription string `json:"contractsDescription"`
				Description          string `json:"description"`
				EntityTypeID         int    `json:"entityTypeId"`
				EquipmentDescription string `json:"equipmentDescription"`
				FeatureDescription   string `json:"featureDescription"`
				FeatureName          string `json:"featureName"`
				Flaws                []struct {
					Description string `json:"description"`
					DiceRoll    int    `json:"diceRoll"`
					ID          int    `json:"id"`
				} `json:"flaws"`
				ID     int `json:"id"`
				Ideals []struct {
					Description string `json:"description"`
					DiceRoll    int    `json:"diceRoll"`
					ID          int    `json:"id"`
				} `json:"ideals"`
				LanguagesDescription string      `json:"languagesDescription"`
				LargeAvatarURL       interface{} `json:"largeAvatarUrl"`
				Name                 string      `json:"name"`
				Organization         interface{} `json:"organization"`
				PersonalityTraits    []struct {
					Description string `json:"description"`
					DiceRoll    int    `json:"diceRoll"`
					ID          int    `json:"id"`
				} `json:"personalityTraits"`
				ShortDescription                    string      `json:"shortDescription"`
				SkillProficienciesDescription       string      `json:"skillProficienciesDescription"`
				Snippet                             string      `json:"snippet"`
				SpellsPostDescription               string      `json:"spellsPostDescription"`
				SpellsPreDescription                string      `json:"spellsPreDescription"`
				SuggestedCharacteristicsDescription string      `json:"suggestedCharacteristicsDescription"`
				SuggestedLanguages                  interface{} `json:"suggestedLanguages"`
				SuggestedProficiencies              interface{} `json:"suggestedProficiencies"`
				ToolProficienciesDescription        string      `json:"toolProficienciesDescription"`
				IsHomebrew                          bool        `json:"isHomebrew"`
				Sources                             []struct {
					SourceID   int         `json:"sourceId"`
					PageNumber interface{} `json:"pageNumber"`
					SourceType int         `json:"sourceType"`
				} `json:"sources"`
				SpellListIds []interface{} `json:"spellListIds"`
			} `json:"definition"`
			DefinitionID        interface{} `json:"definitionId"`
			HasCustomBackground bool        `json:"hasCustomBackground"`
		} `json:"background"`
		Race struct {
			IsSubRace         bool          `json:"isSubRace"`
			BaseRaceName      string        `json:"baseRaceName"`
			EntityRaceID      int           `json:"entityRaceId"`
			EntityRaceTypeID  int           `json:"entityRaceTypeId"`
			FullName          string        `json:"fullName"`
			BaseRaceID        int           `json:"baseRaceId"`
			BaseRaceTypeID    int           `json:"baseRaceTypeId"`
			Description       string        `json:"description"`
			AvatarURL         interface{}   `json:"avatarUrl"`
			LargeAvatarURL    interface{}   `json:"largeAvatarUrl"`
			PortraitAvatarURL string        `json:"portraitAvatarUrl"`
			MoreDetailsURL    string        `json:"moreDetailsUrl"`
			IsHomebrew        bool          `json:"isHomebrew"`
			SourceIds         []interface{} `json:"sourceIds"`
			GroupIds          []int         `json:"groupIds"`
			Type              int           `json:"type"`
			SubRaceShortName  string        `json:"subRaceShortName"`
			BaseName          string        `json:"baseName"`
			RacialTraits      []struct {
				Definition struct {
					ID                            int           `json:"id"`
					DefinitionKey                 string        `json:"definitionKey"`
					EntityTypeID                  int           `json:"entityTypeId"`
					DisplayOrder                  int           `json:"displayOrder"`
					Name                          string        `json:"name"`
					Description                   string        `json:"description"`
					Snippet                       string        `json:"snippet"`
					HideInBuilder                 bool          `json:"hideInBuilder"`
					HideInSheet                   bool          `json:"hideInSheet"`
					Activation                    interface{}   `json:"activation"`
					SourceID                      int           `json:"sourceId"`
					SourcePageNumber              int           `json:"sourcePageNumber"`
					CreatureRules                 []interface{} `json:"creatureRules"`
					SpellListIds                  []interface{} `json:"spellListIds"`
					FeatureType                   int           `json:"featureType"`
					Sources                       interface{}   `json:"sources"`
					AffectedFeatureDefinitionKeys []interface{} `json:"affectedFeatureDefinitionKeys"`
					IsCalledOut                   bool          `json:"isCalledOut"`
				} `json:"definition"`
			} `json:"racialTraits"`
			WeightSpeeds struct {
				Encumbered        interface{} `json:"encumbered"`
				HeavilyEncumbered interface{} `json:"heavilyEncumbered"`
				Normal            struct {
					Burrow int `json:"burrow"`
					Climb  int `json:"climb"`
					Fly    int `json:"fly"`
					Swim   int `json:"swim"`
					Walk   int `json:"walk"`
				} `json:"normal"`
				Override     interface{} `json:"override"`
				PushDragLift interface{} `json:"pushDragLift"`
			} `json:"weightSpeeds"`
			FeatIds         []interface{} `json:"featIds"`
			Size            interface{}   `json:"size"`
			SizeID          int           `json:"sizeId"`
			SupportsSubrace interface{}   `json:"supportsSubrace"`
			Sources         []struct {
				SourceID   int         `json:"sourceId"`
				PageNumber interface{} `json:"pageNumber"`
				SourceType int         `json:"sourceType"`
			} `json:"sources"`
		} `json:"race"`
		RaceDefinitionID     interface{} `json:"raceDefinitionId"`
		RaceDefinitionTypeID interface{} `json:"raceDefinitionTypeId"`
		Notes                struct {
			Allies              string      `json:"allies"`
			Backstory           string      `json:"backstory"`
			Enemies             string      `json:"enemies"`
			Organizations       string      `json:"organizations"`
			OtherHoldings       interface{} `json:"otherHoldings"`
			OtherNotes          string      `json:"otherNotes"`
			PersonalPossessions string      `json:"personalPossessions"`
		} `json:"notes"`
		Traits struct {
			Appearance        string `json:"appearance"`
			Bonds             string `json:"bonds"`
			Flaws             string `json:"flaws"`
			Ideals            string `json:"ideals"`
			PersonalityTraits string `json:"personalityTraits"`
		} `json:"traits"`
		Preferences struct {
			AbilityScoreDisplayType     int  `json:"abilityScoreDisplayType"`
			EncumbranceType             int  `json:"encumbranceType"`
			EnforceFeatRules            bool `json:"enforceFeatRules"`
			EnforceMulticlassRules      bool `json:"enforceMulticlassRules"`
			ShowScaledSpells            bool `json:"showScaledSpells"`
			HitPointType                int  `json:"hitPointType"`
			IgnoreCoinWeight            bool `json:"ignoreCoinWeight"`
			PrimaryMovement             int  `json:"primaryMovement"`
			PrimarySense                int  `json:"primarySense"`
			PrivacyType                 int  `json:"privacyType"`
			ProgressionType             int  `json:"progressionType"`
			SharingType                 int  `json:"sharingType"`
			ShowUnarmedStrike           bool `json:"showUnarmedStrike"`
			UseHomebrewContent          bool `json:"useHomebrewContent"`
			EnableOptionalClassFeatures bool `json:"enableOptionalClassFeatures"`
			EnableOptionalOrigins       bool `json:"enableOptionalOrigins"`
		} `json:"preferences"`
		Configuration struct {
			AbilityScoreType      int         `json:"abilityScoreType"`
			ShowHelpText          bool        `json:"showHelpText"`
			StartingEquipmentType interface{} `json:"startingEquipmentType"`
		} `json:"configuration"`
		Lifestyle interface{} `json:"lifestyle"`
		Inventory []struct {
			ChargesUsed int `json:"chargesUsed"`
			Definition  struct {
				ArmorClass            int         `json:"armorClass"`
				AttackType            interface{} `json:"attackType"`
				AttunementDescription string      `json:"attunementDescription"`
				AvatarURL             interface{} `json:"avatarUrl"`
				BaseArmorName         interface{} `json:"baseArmorName"`
				BaseItemID            interface{} `json:"baseItemId"`
				BaseTypeID            int         `json:"baseTypeId"`
				BundleSize            int         `json:"bundleSize"`
				CanAttune             bool        `json:"canAttune"`
				CanEquip              bool        `json:"canEquip"`
				CategoryID            interface{} `json:"categoryId"`
				Cost                  interface{} `json:"cost"`
				Damage                struct {
					*js.Object

					DiceCount      int         `json:"diceCount" js:"diceCount"`
					DiceValue      int         `json:"diceValue" js:"diceValue"`
					DiceMultiplier interface{} `json:"diceMultiplier" js:"diceMultiplier"`
					FixedValue     interface{} `json:"fixedValue" js:"fixedValue"`
					DiceString     string      `json:"diceString" js:"diceString"`
				} `json:"damage"`
				DamageType       interface{}   `json:"damageType"`
				Description      string        `json:"description"`
				EntityTypeID     int           `json:"entityTypeId"`
				FilterType       string        `json:"filterType"`
				FixedDamage      interface{}   `json:"fixedDamage"`
				GrantedModifiers []interface{} `json:"grantedModifiers"`
				ID               int           `json:"id"`
				IsConsumable     bool          `json:"isConsumable"`
				IsHomebrew       bool          `json:"isHomebrew"`
				IsMonkWeapon     bool          `json:"isMonkWeapon"`
				IsPack           bool          `json:"isPack"`
				LargeAvatarURL   interface{}   `json:"largeAvatarUrl"`
				LongRange        interface{}   `json:"longRange"`
				Magic            bool          `json:"magic"`
				Name             string        `json:"name"`
				Properties       []struct {
					*js.Object

					ID          int    `json:"id" js:"id"`
					Name        string `json:"name" js:"name"`
					Description string `json:"description" js:"description"`
					Notes       string `json:"notes" js:"notes"`
				} `json:"properties"`
				Range                interface{}   `json:"range"`
				Rarity               string        `json:"rarity"`
				Snippet              string        `json:"snippet"`
				SourceID             interface{}   `json:"sourceId"`
				SourcePageNumber     interface{}   `json:"sourcePageNumber"`
				Stackable            bool          `json:"stackable"`
				StealthCheck         int           `json:"stealthCheck"`
				StrengthRequirement  int           `json:"strengthRequirement"`
				SubType              interface{}   `json:"subType"`
				Tags                 []string      `json:"tags"`
				Type                 string        `json:"type"`
				Version              interface{}   `json:"version"`
				WeaponBehaviors      []interface{} `json:"weaponBehaviors"`
				Weight               float64       `json:"weight"`
				LevelInfusionGranted interface{}   `json:"levelInfusionGranted"`
				Sources              []struct {
					SourceID   int         `json:"sourceId"`
					PageNumber interface{} `json:"pageNumber"`
					SourceType int         `json:"sourceType"`
				} `json:"sources"`
				ArmorTypeID           interface{} `json:"armorTypeId"`
				GearTypeID            int         `json:"gearTypeId"`
				GroupedID             interface{} `json:"groupedId"`
				CanBeAddedToInventory bool        `json:"canBeAddedToInventory"`
			} `json:"definition"`
			DefinitionID     int         `json:"definitionId"`
			DefinitionTypeID int         `json:"definitionTypeId"`
			DisplayAsAttack  interface{} `json:"displayAsAttack"`
			EntityTypeID     int         `json:"entityTypeId"`
			Equipped         bool        `json:"equipped"`
			ID               int         `json:"id"`
			IsAttuned        bool        `json:"isAttuned"`
			LimitedUse       struct {
				MaxUses              int    `json:"maxUses"`
				NumberUsed           int    `json:"numberUsed"`
				ResetType            string `json:"resetType"`
				ResetTypeDescription string `json:"resetTypeDescription"`
			} `json:"limitedUse"`
			Quantity int `json:"quantity"`
		} `json:"inventory"`
		Currencies struct {
			Cp int `json:"cp"`
			Ep int `json:"ep"`
			Gp int `json:"gp"`
			Pp int `json:"pp"`
			Sp int `json:"sp"`
		} `json:"currencies"`
		Classes []struct {
			ClassFeatures []struct {
				Definition struct {
					DefinitionKey                 string        `json:"definitionKey"`
					Activation                    interface{}   `json:"activation"`
					CreatureRules                 []interface{} `json:"creatureRules"`
					Description                   string        `json:"description"`
					DisplayOrder                  int           `json:"displayOrder"`
					EntityTypeID                  int           `json:"entityTypeId"`
					HideInBuilder                 bool          `json:"hideInBuilder"`
					HideInSheet                   bool          `json:"hideInSheet"`
					ID                            int           `json:"id"`
					IsSubClassFeature             bool          `json:"isSubClassFeature"`
					LevelScales                   interface{}   `json:"levelScales"`
					LimitedUse                    []interface{} `json:"limitedUse"`
					MultiClassDescription         string        `json:"multiClassDescription"`
					Name                          string        `json:"name"`
					RequiredLevel                 int           `json:"requiredLevel"`
					Snippet                       string        `json:"snippet"`
					SourceID                      int           `json:"sourceId"`
					SourcePageNumber              int           `json:"sourcePageNumber"`
					InfusionRules                 []interface{} `json:"infusionRules"`
					SpellListIds                  []interface{} `json:"spellListIds"`
					ClassID                       int           `json:"classId"`
					FeatureType                   int           `json:"featureType"`
					Sources                       interface{}   `json:"sources"`
					AffectedFeatureDefinitionKeys []interface{} `json:"affectedFeatureDefinitionKeys"`
				} `json:"definition"`
				LevelScale interface{} `json:"levelScale"`
			} `json:"classFeatures"`
			Definition struct {
				AvatarURL               string      `json:"avatarUrl"`
				CanCastSpells           bool        `json:"canCastSpells"`
				ClassFeatureDefinitions interface{} `json:"classFeatureDefinitions"`
				ClassFeatures           []struct {
					Description   string      `json:"description"`
					DisplayOrder  int         `json:"displayOrder"`
					ID            int         `json:"id"`
					Name          string      `json:"name"`
					Prerequisite  interface{} `json:"prerequisite"`
					RequiredLevel int         `json:"requiredLevel"`
				} `json:"classFeatures"`
				Description           string        `json:"description"`
				EquipmentDescription  string        `json:"equipmentDescription"`
				HitDice               int           `json:"hitDice"`
				ID                    int           `json:"id"`
				KnowsAllSpells        bool          `json:"knowsAllSpells"`
				LargeAvatarURL        string        `json:"largeAvatarUrl"`
				MoreDetailsURL        string        `json:"moreDetailsUrl"`
				Name                  string        `json:"name"`
				ParentClassID         interface{}   `json:"parentClassId"`
				PortraitAvatarURL     string        `json:"portraitAvatarUrl"`
				SourceID              interface{}   `json:"sourceId"`
				SourceIds             []interface{} `json:"sourceIds"`
				SourcePageNumber      int           `json:"sourcePageNumber"`
				SpellCastingAbilityID int           `json:"spellCastingAbilityId"`
				SpellContainerName    interface{}   `json:"spellContainerName"`
				SpellPrepareType      interface{}   `json:"spellPrepareType"`
				SubclassDefinition    interface{}   `json:"subclassDefinition"`
				WealthDice            struct {
					DiceCount      int         `json:"diceCount"`
					DiceMultiplier int         `json:"diceMultiplier"`
					DiceString     string      `json:"diceString"`
					DiceValue      int         `json:"diceValue"`
					FixedValue     interface{} `json:"fixedValue"`
				} `json:"wealthDice"`
				IsHomebrew bool `json:"isHomebrew"`
				Sources    []struct {
					SourceID   int `json:"sourceId"`
					PageNumber int `json:"pageNumber"`
					SourceType int `json:"sourceType"`
				} `json:"sources"`
				Prerequisites []struct {
					Description          string `json:"description"`
					PrerequisiteMappings []struct {
						EntityID            int    `json:"entityId"`
						EntityTypeID        int    `json:"entityTypeId"`
						FriendlySubTypeName string `json:"friendlySubTypeName"`
						FriendlyTypeName    string `json:"friendlyTypeName"`
						ID                  int    `json:"id"`
						SubType             string `json:"subType"`
						Type                string `json:"type"`
						Value               int    `json:"value"`
					} `json:"prerequisiteMappings"`
				} `json:"prerequisites"`
				PrimaryAbilities []int `json:"primaryAbilities"`
				SpellRules       struct {
					IsRitualSpellCaster         bool    `json:"isRitualSpellCaster"`
					LevelCantripsKnownMaxes     []int   `json:"levelCantripsKnownMaxes"`
					LevelSpellKnownMaxes        []int   `json:"levelSpellKnownMaxes"`
					LevelSpellSlots             [][]int `json:"levelSpellSlots"`
					MultiClassSpellSlotDivisor  int     `json:"multiClassSpellSlotDivisor"`
					MultiClassSpellSlotRounding int     `json:"multiClassSpellSlotRounding"`
				} `json:"spellRules"`
			} `json:"definition"`
			DefinitionID       int  `json:"definitionId"`
			EntityTypeID       int  `json:"entityTypeId"`
			HitDiceUsed        int  `json:"hitDiceUsed"`
			ID                 int  `json:"id"`
			IsStartingClass    bool `json:"isStartingClass"`
			Level              int  `json:"level"`
			SubclassDefinition struct {
				AvatarURL               interface{} `json:"avatarUrl"`
				CanCastSpells           bool        `json:"canCastSpells"`
				ClassFeatureDefinitions interface{} `json:"classFeatureDefinitions"`
				ClassFeatures           []struct {
					Description   string      `json:"description"`
					DisplayOrder  int         `json:"displayOrder"`
					ID            int         `json:"id"`
					Name          string      `json:"name"`
					Prerequisite  interface{} `json:"prerequisite"`
					RequiredLevel int         `json:"requiredLevel"`
				} `json:"classFeatures"`
				Description           string        `json:"description"`
				EquipmentDescription  interface{}   `json:"equipmentDescription"`
				HitDice               int           `json:"hitDice"`
				ID                    int           `json:"id"`
				KnowsAllSpells        bool          `json:"knowsAllSpells"`
				LargeAvatarURL        interface{}   `json:"largeAvatarUrl"`
				MoreDetailsURL        string        `json:"moreDetailsUrl"`
				Name                  string        `json:"name"`
				ParentClassID         int           `json:"parentClassId"`
				PortraitAvatarURL     interface{}   `json:"portraitAvatarUrl"`
				SourceID              interface{}   `json:"sourceId"`
				SourceIds             []interface{} `json:"sourceIds"`
				SourcePageNumber      int           `json:"sourcePageNumber"`
				SpellCastingAbilityID int           `json:"spellCastingAbilityId"`
				SpellContainerName    interface{}   `json:"spellContainerName"`
				SpellPrepareType      interface{}   `json:"spellPrepareType"`
				SubclassDefinition    interface{}   `json:"subclassDefinition"`
				WealthDice            interface{}   `json:"wealthDice"`
				IsHomebrew            bool          `json:"isHomebrew"`
				Sources               []struct {
					SourceID   int `json:"sourceId"`
					PageNumber int `json:"pageNumber"`
					SourceType int `json:"sourceType"`
				} `json:"sources"`
				Prerequisites    interface{} `json:"prerequisites"`
				PrimaryAbilities interface{} `json:"primaryAbilities"`
				SpellRules       interface{} `json:"spellRules"`
			} `json:"subclassDefinition"`
			SubclassDefinitionID interface{} `json:"subclassDefinitionId"`
		} `json:"classes"`
		Feats                    []interface{} `json:"feats"`
		CustomDefenseAdjustments []interface{} `json:"customDefenseAdjustments"`
		CustomSenses             []interface{} `json:"customSenses"`
		CustomSpeeds             []interface{} `json:"customSpeeds"`
		CustomProficiencies      []interface{} `json:"customProficiencies"`
		SpellDefenses            interface{}   `json:"spellDefenses"`
		CustomActions            []struct {
			ActionType             int         `json:"actionType"`
			ActivationTime         interface{} `json:"activationTime"`
			ActivationType         int         `json:"activationType"`
			AoeSize                interface{} `json:"aoeSize"`
			AoeType                int         `json:"aoeType"`
			AttackSubtype          interface{} `json:"attackSubtype"`
			DamageBonus            interface{} `json:"damageBonus"`
			DamageTypeID           int         `json:"damageTypeId"`
			Description            interface{} `json:"description"`
			DiceCount              int         `json:"diceCount"`
			DiceType               int         `json:"diceType"`
			DisplayAsAttack        interface{} `json:"displayAsAttack"`
			EntityTypeID           string      `json:"entityTypeId"`
			FixedSaveDc            interface{} `json:"fixedSaveDc"`
			FixedValue             interface{} `json:"fixedValue"`
			ID                     string      `json:"id"`
			IsMartialArts          bool        `json:"isMartialArts"`
			IsOffhand              interface{} `json:"isOffhand"`
			IsProficient           bool        `json:"isProficient"`
			IsSilvered             bool        `json:"isSilvered"`
			LongRange              interface{} `json:"longRange"`
			Name                   string      `json:"name"`
			OnMissDescription      interface{} `json:"onMissDescription"`
			Range                  interface{} `json:"range"`
			RangeID                int         `json:"rangeId"`
			SaveFailDescription    interface{} `json:"saveFailDescription"`
			SaveStatID             int         `json:"saveStatId"`
			SaveSuccessDescription interface{} `json:"saveSuccessDescription"`
			Snippet                string      `json:"snippet"`
			SpellRangeType         interface{} `json:"spellRangeType"`
			StatID                 int         `json:"statId"`
			ToHitBonus             interface{} `json:"toHitBonus"`
		} `json:"customActions"`
		CharacterValues []struct {
			ContextID     interface{} `json:"contextId"`
			ContextTypeID interface{} `json:"contextTypeId"`
			Notes         interface{} `json:"notes"`
			TypeID        int         `json:"typeId"`
			Value         bool        `json:"value"`
			ValueID       string      `json:"valueId"`
			ValueTypeID   string      `json:"valueTypeId"`
		} `json:"characterValues"`
		Conditions []struct {
			ID    int         `json:"id"`
			Level interface{} `json:"level"`
		} `json:"conditions"`
		DeathSaves struct {
			FailCount    interface{} `json:"failCount"`
			IsStabilized bool        `json:"isStabilized"`
			SuccessCount interface{} `json:"successCount"`
		} `json:"deathSaves"`
		AdjustmentXp interface{} `json:"adjustmentXp"`
		SpellSlots   []struct {
			Available int `json:"available"`
			Level     int `json:"level"`
			Used      int `json:"used"`
		} `json:"spellSlots"`
		PactMagic []struct {
			Available int `json:"available"`
			Level     int `json:"level"`
			Used      int `json:"used"`
		} `json:"pactMagic"`
		ActiveSourceCategories []int `json:"activeSourceCategories"`
		Spells                 struct {
			Background interface{}   `json:"background"`
			Class      []interface{} `json:"class"`
			Feat       []interface{} `json:"feat"`
			Item       []struct {
				Activation struct {
					ActivationTime int `json:"activationTime"`
					ActivationType int `json:"activationType"`
				} `json:"activation"`
				AdditionalDescription interface{} `json:"additionalDescription"`
				AlwaysPrepared        bool        `json:"alwaysPrepared"`
				AtWillLimitedUseLevel interface{} `json:"atWillLimitedUseLevel"`
				BaseLevelAtWill       bool        `json:"baseLevelAtWill"`
				CastAtLevel           interface{} `json:"castAtLevel"`
				CastOnlyAsRitual      bool        `json:"castOnlyAsRitual"`
				ComponentID           int         `json:"componentId"`
				ComponentTypeID       int         `json:"componentTypeId"`
				CountsAsKnownSpell    interface{} `json:"countsAsKnownSpell"`
				Definition            struct {
					Activation struct {
						ActivationTime int `json:"activationTime"`
						ActivationType int `json:"activationType"`
					} `json:"activation"`
					AsPartOfWeaponAttack bool `json:"asPartOfWeaponAttack"`
					AtHigherLevels       struct {
						AdditionalAttacks      []interface{} `json:"additionalAttacks"`
						AdditionalTargets      []interface{} `json:"additionalTargets"`
						AreaOfEffect           []interface{} `json:"areaOfEffect"`
						Creatures              []interface{} `json:"creatures"`
						Duration               []interface{} `json:"duration"`
						HigherLevelDefinitions []interface{} `json:"higherLevelDefinitions"`
						Points                 []interface{} `json:"points"`
						ScaleType              interface{}   `json:"scaleType"`
						Special                []interface{} `json:"special"`
					} `json:"atHigherLevels"`
					AttackType             interface{} `json:"attackType"`
					CanCastAtHigherLevel   bool        `json:"canCastAtHigherLevel"`
					CastingTimeDescription string      `json:"castingTimeDescription"`
					Components             []int       `json:"components"`
					ComponentsDescription  string      `json:"componentsDescription"`
					Concentration          bool        `json:"concentration"`
					Conditions             []struct {
						ConditionDuration int    `json:"conditionDuration"`
						ConditionID       int    `json:"conditionId"`
						DurationUnit      string `json:"durationUnit"`
						Exception         string `json:"exception"`
						Type              int    `json:"type"`
					} `json:"conditions"`
					DamageEffect interface{} `json:"damageEffect"`
					Description  string      `json:"description"`
					Duration     struct {
						DurationInterval int    `json:"durationInterval"`
						DurationUnit     string `json:"durationUnit"`
						DurationType     string `json:"durationType"`
					} `json:"duration"`
					Healing     interface{}   `json:"healing"`
					HealingDice []interface{} `json:"healingDice"`
					ID          int           `json:"id"`
					IsHomebrew  bool          `json:"isHomebrew"`
					Level       int           `json:"level"`
					Modifiers   []interface{} `json:"modifiers"`
					Name        string        `json:"name"`
					Range       struct {
						AoeType    string `json:"aoeType"`
						AoeValue   int    `json:"aoeValue"`
						Origin     string `json:"origin"`
						RangeValue int    `json:"rangeValue"`
					} `json:"range"`
					RangeArea           interface{}   `json:"rangeArea"`
					RequiresAttackRoll  bool          `json:"requiresAttackRoll"`
					RequiresSavingThrow bool          `json:"requiresSavingThrow"`
					Ritual              bool          `json:"ritual"`
					SaveDcAbilityID     int           `json:"saveDcAbilityId"`
					School              string        `json:"school"`
					Snippet             string        `json:"snippet"`
					SourceID            interface{}   `json:"sourceId"`
					SourcePageNumber    int           `json:"sourcePageNumber"`
					Tags                []string      `json:"tags"`
					TempHpDice          []interface{} `json:"tempHpDice"`
					Version             interface{}   `json:"version"`
					Sources             []struct {
						SourceID   int         `json:"sourceId"`
						PageNumber interface{} `json:"pageNumber"`
						SourceType int         `json:"sourceType"`
					} `json:"sources"`
					ScaleType interface{} `json:"scaleType"`
				} `json:"definition"`
				DefinitionID     int         `json:"definitionId"`
				DisplayAsAttack  bool        `json:"displayAsAttack"`
				EntityTypeID     int         `json:"entityTypeId"`
				ID               int         `json:"id"`
				IsSignatureSpell interface{} `json:"isSignatureSpell"`
				LimitedUse       struct {
					MaxNumberConsumed  int         `json:"maxNumberConsumed"`
					MaxUses            int         `json:"maxUses"`
					MinNumberConsumed  int         `json:"minNumberConsumed"`
					Name               interface{} `json:"name"`
					NumberUsed         int         `json:"numberUsed"`
					ResetType          interface{} `json:"resetType"`
					StatModifierUsesID interface{} `json:"statModifierUsesId"`
					Operator           interface{} `json:"operator"`
					ResetDice          interface{} `json:"resetDice"`
				} `json:"limitedUse"`
				OverrideSaveDc int  `json:"overrideSaveDc"`
				Prepared       bool `json:"prepared"`
				Range          struct {
					AoeType    string `json:"aoeType"`
					AoeValue   int    `json:"aoeValue"`
					Origin     string `json:"origin"`
					RangeValue int    `json:"rangeValue"`
				} `json:"range"`
				Restriction           interface{} `json:"restriction"`
				RitualCastingType     interface{} `json:"ritualCastingType"`
				SpellCastingAbilityID interface{} `json:"spellCastingAbilityId"`
				UsesSpellSlot         bool        `json:"usesSpellSlot"`
				SpellListID           interface{} `json:"spellListId"`
			} `json:"item"`
			Race []interface{} `json:"race"`
		} `json:"spells"`
		Options struct {
			Background interface{} `json:"background"`
			Class      []struct {
				ComponentID     int `json:"componentId"`
				ComponentTypeID int `json:"componentTypeId"`
				Definition      struct {
					Activation       interface{}   `json:"activation"`
					CreatureRules    []interface{} `json:"creatureRules"`
					Description      string        `json:"description"`
					EntityTypeID     int           `json:"entityTypeId"`
					ID               int           `json:"id"`
					Name             string        `json:"name"`
					Snippet          string        `json:"snippet"`
					SourceID         int           `json:"sourceId"`
					SourcePageNumber interface{}   `json:"sourcePageNumber"`
					SpellListIds     []interface{} `json:"spellListIds"`
				} `json:"definition"`
			} `json:"class"`
			Feat []interface{} `json:"feat"`
			Item interface{}   `json:"item"`
			Race []interface{} `json:"race"`
		} `json:"options"`
		Choices struct {
			Background []struct {
				ComponentID     int      `json:"componentId"`
				ComponentTypeID int      `json:"componentTypeId"`
				DefaultSubtypes []string `json:"defaultSubtypes"`
				ID              string   `json:"id"`
				IsInfinite      bool     `json:"isInfinite"`
				IsOptional      bool     `json:"isOptional"`
				Label           string   `json:"label"`
				Options         []struct {
					Description interface{} `json:"description"`
					ID          int         `json:"id"`
					Label       string      `json:"label"`
				} `json:"options"`
				OptionValue    int         `json:"optionValue"`
				ParentChoiceID interface{} `json:"parentChoiceId"`
				SubType        int         `json:"subType"`
				Type           int         `json:"type"`
				DisplayOrder   interface{} `json:"displayOrder"`
			} `json:"background"`
			Class []struct {
				ComponentID     int           `json:"componentId"`
				ComponentTypeID int           `json:"componentTypeId"`
				DefaultSubtypes []interface{} `json:"defaultSubtypes"`
				ID              string        `json:"id"`
				IsInfinite      bool          `json:"isInfinite"`
				IsOptional      bool          `json:"isOptional"`
				Label           interface{}   `json:"label"`
				Options         []struct {
					Description string `json:"description"`
					ID          int    `json:"id"`
					Label       string `json:"label"`
				} `json:"options"`
				OptionValue    int         `json:"optionValue"`
				ParentChoiceID interface{} `json:"parentChoiceId"`
				SubType        interface{} `json:"subType"`
				Type           int         `json:"type"`
				DisplayOrder   interface{} `json:"displayOrder"`
			} `json:"class"`
			Feat []interface{} `json:"feat"`
			Item interface{}   `json:"item"`
			Race []struct {
				ComponentID     int           `json:"componentId"`
				ComponentTypeID int           `json:"componentTypeId"`
				DefaultSubtypes []interface{} `json:"defaultSubtypes"`
				ID              string        `json:"id"`
				IsInfinite      bool          `json:"isInfinite"`
				IsOptional      bool          `json:"isOptional"`
				Label           string        `json:"label"`
				Options         []struct {
					Description interface{} `json:"description"`
					ID          int         `json:"id"`
					Label       string      `json:"label"`
				} `json:"options"`
				OptionValue    int         `json:"optionValue"`
				ParentChoiceID interface{} `json:"parentChoiceId"`
				SubType        int         `json:"subType"`
				Type           int         `json:"type"`
				DisplayOrder   interface{} `json:"displayOrder"`
			} `json:"race"`
		} `json:"choices"`
		Actions struct {
			Background interface{} `json:"background"`
			Class      []struct {
				AbilityModifierStatID interface{} `json:"abilityModifierStatId"`
				ActionType            int         `json:"actionType"`
				Activation            struct {
					ActivationTime int `json:"activationTime"`
					ActivationType int `json:"activationType"`
				} `json:"activation"`
				AttackSubtype   interface{} `json:"attackSubtype"`
				AttackTypeRange interface{} `json:"attackTypeRange"`
				ComponentID     int         `json:"componentId"`
				ComponentTypeID int         `json:"componentTypeId"`
				DamageTypeID    interface{} `json:"damageTypeId"`
				Description     string      `json:"description"`
				Dice            interface{} `json:"dice"`
				DisplayAsAttack interface{} `json:"displayAsAttack"`
				EntityTypeID    string      `json:"entityTypeId"`
				FixedSaveDc     interface{} `json:"fixedSaveDc"`
				FixedToHit      interface{} `json:"fixedToHit"`
				ID              string      `json:"id"`
				IsMartialArts   bool        `json:"isMartialArts"`
				IsProficient    bool        `json:"isProficient"`
				LimitedUse      struct {
					MaxNumberConsumed  int         `json:"maxNumberConsumed"`
					MaxUses            int         `json:"maxUses"`
					MinNumberConsumed  int         `json:"minNumberConsumed"`
					Name               interface{} `json:"name"`
					NumberUsed         int         `json:"numberUsed"`
					ResetType          int         `json:"resetType"`
					StatModifierUsesID interface{} `json:"statModifierUsesId"`
					Operator           int         `json:"operator"`
					ResetDice          interface{} `json:"resetDice"`
				} `json:"limitedUse"`
				Name              string      `json:"name"`
				NumberOfTargets   interface{} `json:"numberOfTargets"`
				OnMissDescription string      `json:"onMissDescription"`
				Range             struct {
					HasAoeSpecialDescription bool        `json:"hasAoeSpecialDescription"`
					AoeSize                  interface{} `json:"aoeSize"`
					AoeType                  interface{} `json:"aoeType"`
					LongRange                interface{} `json:"longRange"`
					MinimumRange             interface{} `json:"minimumRange"`
					Range                    interface{} `json:"range"`
				} `json:"range"`
				SaveFailDescription    string      `json:"saveFailDescription"`
				SaveStatID             interface{} `json:"saveStatId"`
				SaveSuccessDescription string      `json:"saveSuccessDescription"`
				Snippet                string      `json:"snippet"`
				SpellRangeType         interface{} `json:"spellRangeType"`
				Value                  interface{} `json:"value"`
				Ammunition             interface{} `json:"ammunition"`
			} `json:"class"`
			Feat []interface{} `json:"feat"`
			Item interface{}   `json:"item"`
			Race []interface{} `json:"race"`
		} `json:"actions"`
		Modifiers struct {
			Background []struct {
				AvailableToMulticlass bool          `json:"availableToMulticlass"`
				BonusTypes            []interface{} `json:"bonusTypes"`
				Dice                  interface{}   `json:"dice"`
				Duration              interface{}   `json:"duration"`
				EntityID              int           `json:"entityId"`
				EntityTypeID          int           `json:"entityTypeId"`
				FixedValue            interface{}   `json:"fixedValue"`
				FriendlySubtypeName   string        `json:"friendlySubtypeName"`
				FriendlyTypeName      string        `json:"friendlyTypeName"`
				ID                    string        `json:"id"`
				IsGranted             bool          `json:"isGranted"`
				ModifierSubTypeID     int           `json:"modifierSubTypeId"`
				ModifierTypeID        int           `json:"modifierTypeId"`
				RequiresAttunement    bool          `json:"requiresAttunement"`
				Restriction           string        `json:"restriction"`
				StatID                interface{}   `json:"statId"`
				SubType               string        `json:"subType"`
				Type                  string        `json:"type"`
				Value                 interface{}   `json:"value"`
				ComponentID           int           `json:"componentId"`
				ComponentTypeID       int           `json:"componentTypeId"`
			} `json:"background"`
			Class []struct {
				AvailableToMulticlass bool          `json:"availableToMulticlass"`
				BonusTypes            []interface{} `json:"bonusTypes"`
				Dice                  interface{}   `json:"dice"`
				Duration              interface{}   `json:"duration"`
				EntityID              interface{}   `json:"entityId"`
				EntityTypeID          interface{}   `json:"entityTypeId"`
				FixedValue            interface{}   `json:"fixedValue"`
				FriendlySubtypeName   string        `json:"friendlySubtypeName"`
				FriendlyTypeName      string        `json:"friendlyTypeName"`
				ID                    string        `json:"id"`
				IsGranted             bool          `json:"isGranted"`
				ModifierSubTypeID     int           `json:"modifierSubTypeId"`
				ModifierTypeID        int           `json:"modifierTypeId"`
				RequiresAttunement    bool          `json:"requiresAttunement"`
				Restriction           string        `json:"restriction"`
				StatID                interface{}   `json:"statId"`
				SubType               string        `json:"subType"`
				Type                  string        `json:"type"`
				Value                 interface{}   `json:"value"`
				ComponentID           int           `json:"componentId"`
				ComponentTypeID       int           `json:"componentTypeId"`
			} `json:"class"`
			Condition []interface{} `json:"condition"`
			Feat      []interface{} `json:"feat"`
			Item      []interface{} `json:"item"`
			Race      []struct {
				AvailableToMulticlass bool          `json:"availableToMulticlass"`
				BonusTypes            []interface{} `json:"bonusTypes"`
				Dice                  interface{}   `json:"dice"`
				Duration              interface{}   `json:"duration"`
				EntityID              int           `json:"entityId"`
				EntityTypeID          int           `json:"entityTypeId"`
				FixedValue            int           `json:"fixedValue"`
				FriendlySubtypeName   string        `json:"friendlySubtypeName"`
				FriendlyTypeName      string        `json:"friendlyTypeName"`
				ID                    string        `json:"id"`
				IsGranted             bool          `json:"isGranted"`
				ModifierSubTypeID     int           `json:"modifierSubTypeId"`
				ModifierTypeID        int           `json:"modifierTypeId"`
				RequiresAttunement    bool          `json:"requiresAttunement"`
				Restriction           string        `json:"restriction"`
				StatID                interface{}   `json:"statId"`
				SubType               string        `json:"subType"`
				Type                  string        `json:"type"`
				Value                 int           `json:"value"`
				ComponentID           int           `json:"componentId"`
				ComponentTypeID       int           `json:"componentTypeId"`
			} `json:"race"`
		} `json:"modifiers"`
		ClassSpells []struct {
			CharacterClassID int `json:"characterClassId"`
			EntityTypeID     int `json:"entityTypeId"`
			Spells           []struct {
				Activation struct {
					ActivationTime int `json:"activationTime"`
					ActivationType int `json:"activationType"`
				} `json:"activation"`
				AdditionalDescription interface{} `json:"additionalDescription"`
				AlwaysPrepared        bool        `json:"alwaysPrepared"`
				AtWillLimitedUseLevel interface{} `json:"atWillLimitedUseLevel"`
				BaseLevelAtWill       bool        `json:"baseLevelAtWill"`
				CastAtLevel           interface{} `json:"castAtLevel"`
				CastOnlyAsRitual      bool        `json:"castOnlyAsRitual"`
				ComponentID           int         `json:"componentId"`
				ComponentTypeID       int         `json:"componentTypeId"`
				CountsAsKnownSpell    bool        `json:"countsAsKnownSpell"`
				Definition            struct {
					Activation struct {
						ActivationTime int `json:"activationTime"`
						ActivationType int `json:"activationType"`
					} `json:"activation"`
					AsPartOfWeaponAttack bool `json:"asPartOfWeaponAttack"`
					AtHigherLevels       struct {
						AdditionalAttacks      []interface{} `json:"additionalAttacks"`
						AdditionalTargets      []interface{} `json:"additionalTargets"`
						AreaOfEffect           []interface{} `json:"areaOfEffect"`
						Creatures              []interface{} `json:"creatures"`
						Duration               []interface{} `json:"duration"`
						HigherLevelDefinitions []interface{} `json:"higherLevelDefinitions"`
						Points                 []interface{} `json:"points"`
						ScaleType              string        `json:"scaleType"`
						Special                []interface{} `json:"special"`
					} `json:"atHigherLevels"`
					AttackType             int           `json:"attackType"`
					CanCastAtHigherLevel   bool          `json:"canCastAtHigherLevel"`
					CastingTimeDescription string        `json:"castingTimeDescription"`
					Components             []int         `json:"components"`
					ComponentsDescription  string        `json:"componentsDescription"`
					Concentration          bool          `json:"concentration"`
					Conditions             []interface{} `json:"conditions"`
					DamageEffect           interface{}   `json:"damageEffect"`
					Description            string        `json:"description"`
					Duration               struct {
						DurationInterval int    `json:"durationInterval"`
						DurationUnit     string `json:"durationUnit"`
						DurationType     string `json:"durationType"`
					} `json:"duration"`
					Healing     interface{}   `json:"healing"`
					HealingDice []interface{} `json:"healingDice"`
					ID          int           `json:"id"`
					IsHomebrew  bool          `json:"isHomebrew"`
					Level       int           `json:"level"`
					Modifiers   []struct {
						AtHigherLevels struct {
							AdditionalAttacks      []interface{} `json:"additionalAttacks"`
							AdditionalTargets      []interface{} `json:"additionalTargets"`
							AreaOfEffect           []interface{} `json:"areaOfEffect"`
							Creatures              []interface{} `json:"creatures"`
							Duration               []interface{} `json:"duration"`
							HigherLevelDefinitions []struct {
								Details string `json:"details"`
								Dice    struct {
									DiceCount      int         `json:"diceCount"`
									DiceMultiplier interface{} `json:"diceMultiplier"`
									DiceString     string      `json:"diceString"`
									DiceValue      int         `json:"diceValue"`
									FixedValue     int         `json:"fixedValue"`
								} `json:"dice"`
								Level  int         `json:"level"`
								TypeID int         `json:"typeId"`
								Value  interface{} `json:"value"`
							} `json:"higherLevelDefinitions"`
							Points    []interface{} `json:"points"`
							ScaleType string        `json:"scaleType"`
							Special   []interface{} `json:"special"`
						} `json:"atHigherLevels"`
						Count int `json:"count"`
						Die   struct {
							DiceCount      int         `json:"diceCount"`
							DiceMultiplier interface{} `json:"diceMultiplier"`
							DiceString     string      `json:"diceString"`
							DiceValue      int         `json:"diceValue"`
							FixedValue     int         `json:"fixedValue"`
						} `json:"die"`
						DurationUnit          interface{}   `json:"durationUnit"`
						UsePrimaryStat        bool          `json:"usePrimaryStat"`
						AvailableToMulticlass interface{}   `json:"availableToMulticlass"`
						BonusTypes            []interface{} `json:"bonusTypes"`
						Dice                  interface{}   `json:"dice"`
						Duration              interface{}   `json:"duration"`
						EntityID              interface{}   `json:"entityId"`
						EntityTypeID          interface{}   `json:"entityTypeId"`
						FixedValue            interface{}   `json:"fixedValue"`
						FriendlySubtypeName   string        `json:"friendlySubtypeName"`
						FriendlyTypeName      string        `json:"friendlyTypeName"`
						ID                    string        `json:"id"`
						IsGranted             bool          `json:"isGranted"`
						ModifierSubTypeID     int           `json:"modifierSubTypeId"`
						ModifierTypeID        int           `json:"modifierTypeId"`
						RequiresAttunement    bool          `json:"requiresAttunement"`
						Restriction           string        `json:"restriction"`
						StatID                interface{}   `json:"statId"`
						SubType               string        `json:"subType"`
						Type                  string        `json:"type"`
						Value                 interface{}   `json:"value"`
						ComponentID           int           `json:"componentId"`
						ComponentTypeID       int           `json:"componentTypeId"`
					} `json:"modifiers"`
					Name  string `json:"name"`
					Range struct {
						AoeType    string `json:"aoeType"`
						AoeValue   int    `json:"aoeValue"`
						Origin     string `json:"origin"`
						RangeValue int    `json:"rangeValue"`
					} `json:"range"`
					RangeArea           interface{}   `json:"rangeArea"`
					RequiresAttackRoll  bool          `json:"requiresAttackRoll"`
					RequiresSavingThrow bool          `json:"requiresSavingThrow"`
					Ritual              bool          `json:"ritual"`
					SaveDcAbilityID     interface{}   `json:"saveDcAbilityId"`
					School              string        `json:"school"`
					Snippet             string        `json:"snippet"`
					SourceID            interface{}   `json:"sourceId"`
					SourcePageNumber    int           `json:"sourcePageNumber"`
					Tags                []string      `json:"tags"`
					TempHpDice          []interface{} `json:"tempHpDice"`
					Version             interface{}   `json:"version"`
					Sources             []struct {
						SourceID   int         `json:"sourceId"`
						PageNumber interface{} `json:"pageNumber"`
						SourceType int         `json:"sourceType"`
					} `json:"sources"`
					ScaleType string `json:"scaleType"`
				} `json:"definition"`
				DefinitionID     int         `json:"definitionId"`
				DisplayAsAttack  interface{} `json:"displayAsAttack"`
				EntityTypeID     int         `json:"entityTypeId"`
				ID               int         `json:"id"`
				IsSignatureSpell interface{} `json:"isSignatureSpell"`
				LimitedUse       interface{} `json:"limitedUse"`
				OverrideSaveDc   interface{} `json:"overrideSaveDc"`
				Prepared         bool        `json:"prepared"`
				Range            struct {
					AoeType    interface{} `json:"aoeType"`
					AoeValue   interface{} `json:"aoeValue"`
					Origin     string      `json:"origin"`
					RangeValue int         `json:"rangeValue"`
				} `json:"range"`
				Restriction           interface{} `json:"restriction"`
				RitualCastingType     interface{} `json:"ritualCastingType"`
				SpellCastingAbilityID interface{} `json:"spellCastingAbilityId"`
				UsesSpellSlot         bool        `json:"usesSpellSlot"`
				SpellListID           interface{} `json:"spellListId"`
			} `json:"spells"`
		} `json:"classSpells"`
		CustomItems []interface{} `json:"customItems"`
		Campaign    interface{}   `json:"campaign"`
		Creatures   []struct {
			ID                 int         `json:"id"`
			EntityTypeID       int         `json:"entityTypeId"`
			Name               string      `json:"name"`
			Description        interface{} `json:"description"`
			IsActive           bool        `json:"isActive"`
			RemovedHitPoints   int         `json:"removedHitPoints"`
			TemporaryHitPoints interface{} `json:"temporaryHitPoints"`
			GroupID            int         `json:"groupId"`
			Definition         struct {
				ID                    int    `json:"id"`
				EntityTypeID          int    `json:"entityTypeId"`
				Name                  string `json:"name"`
				AlignmentID           int    `json:"alignmentId"`
				SizeID                int    `json:"sizeId"`
				TypeID                int    `json:"typeId"`
				ArmorClass            int    `json:"armorClass"`
				ArmorClassDescription string `json:"armorClassDescription"`
				AverageHitPoints      int    `json:"averageHitPoints"`
				HitPointDice          struct {
					DiceCount      int         `json:"diceCount"`
					DiceMultiplier interface{} `json:"diceMultiplier"`
					DiceString     string      `json:"diceString"`
					DiceValue      int         `json:"diceValue"`
					FixedValue     int         `json:"fixedValue"`
				} `json:"hitPointDice"`
				Movements []struct {
					MovementID int    `json:"movementId"`
					Speed      int    `json:"speed"`
					Notes      string `json:"notes"`
				} `json:"movements"`
				PassivePerception int           `json:"passivePerception"`
				IsHomebrew        bool          `json:"isHomebrew"`
				ChallengeRatingID int           `json:"challengeRatingId"`
				SourceID          int           `json:"sourceId"`
				SourcePageNumber  int           `json:"sourcePageNumber"`
				IsLegendary       bool          `json:"isLegendary"`
				HasLair           bool          `json:"hasLair"`
				AvatarURL         string        `json:"avatarUrl"`
				LargeAvatarURL    string        `json:"largeAvatarUrl"`
				BasicAvatarURL    string        `json:"basicAvatarUrl"`
				Version           interface{}   `json:"version"`
				Swarm             interface{}   `json:"swarm"`
				SubTypes          []interface{} `json:"subTypes"`
				Environments      []int         `json:"environments"`
				Tags              []interface{} `json:"tags"`
				Sources           []struct {
					SourceID   int         `json:"sourceId"`
					PageNumber interface{} `json:"pageNumber"`
					SourceType int         `json:"sourceType"`
				} `json:"sources"`
				Stats []struct {
					StatID int         `json:"statId"`
					Name   interface{} `json:"name"`
					Value  int         `json:"value"`
				} `json:"stats"`
				Senses []struct {
					SenseID int    `json:"senseId"`
					Notes   string `json:"notes"`
				} `json:"senses"`
				DamageAdjustments   []interface{} `json:"damageAdjustments"`
				ConditionImmunities []interface{} `json:"conditionImmunities"`
				SavingThrows        []struct {
					StatID        int         `json:"statId"`
					BonusModifier interface{} `json:"bonusModifier"`
				} `json:"savingThrows"`
				Skills []struct {
					SkillID         int `json:"skillId"`
					Value           int `json:"value"`
					AdditionalBonus int `json:"additionalBonus"`
				} `json:"skills"`
				Languages []struct {
					LanguageID int    `json:"languageId"`
					Notes      string `json:"notes"`
				} `json:"languages"`
				SpecialTraitsDescription    string `json:"specialTraitsDescription"`
				ActionsDescription          string `json:"actionsDescription"`
				ReactionsDescription        string `json:"reactionsDescription"`
				LegendaryActionsDescription string `json:"legendaryActionsDescription"`
				CharacteristicsDescription  string `json:"characteristicsDescription"`
				LairDescription             string `json:"lairDescription"`
				LanguageDescription         string `json:"languageDescription"`
				LanguageNote                string `json:"languageNote"`
			} `json:"definition"`
		} `json:"creatures"`
		OptionalOrigins       []interface{} `json:"optionalOrigins"`
		OptionalClassFeatures []interface{} `json:"optionalClassFeatures"`
	} `json:"data"`
	Pagination interface{} `json:"pagination"`
}
