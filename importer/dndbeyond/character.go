package beyond

// https://transform.tools/json-to-go
//
// - Replaced *AutoGenerated* with *Character*
// - Add js:"some-tag" tags that match the existing json:"some-tag" tags
// - Add *js.Object as the first entry to every struct
// - Add IsJsEnv variable just below the first *js.Object variable
// It is a very manual process unforunately

import "github.com/gopherjs/gopherjs/js"

type Character struct {
	*js.Object

	// When true, methods.go will reflect on []int type values and
	// fall back to js.Keys(obj.Get("Name")) + obj.Get("Name").Index("0")
	// logic in order to work around internal library issues.
	IsJsEnv bool

	// extracted using https://transform.tools/json-to-go
	ID      int    `json:"id" js:"id"`
	Success bool   `json:"success" js:"success"`
	Message string `json:"message" js:"message"`
	Data    struct {
		*js.Object

		ID                         int         `json:"id" js:"id"`
		ReadonlyURL                string      `json:"readonlyUrl" js:"readonlyUrl"`
		AvatarURL                  interface{} `json:"avatarUrl" js:"avatarUrl"`
		FrameAvatarURL             interface{} `json:"frameAvatarUrl" js:"frameAvatarUrl"`
		BackdropAvatarURL          interface{} `json:"backdropAvatarUrl" js:"backdropAvatarUrl"`
		SmallBackdropAvatarURL     interface{} `json:"smallBackdropAvatarUrl" js:"smallBackdropAvatarUrl"`
		LargeBackdropAvatarURL     interface{} `json:"largeBackdropAvatarUrl" js:"largeBackdropAvatarUrl"`
		ThumbnailBackdropAvatarURL interface{} `json:"thumbnailBackdropAvatarUrl" js:"thumbnailBackdropAvatarUrl"`
		DefaultBackdrop            struct {
			*js.Object

			BackdropAvatarURL          string `json:"backdropAvatarUrl" js:"backdropAvatarUrl"`
			SmallBackdropAvatarURL     string `json:"smallBackdropAvatarUrl" js:"smallBackdropAvatarUrl"`
			LargeBackdropAvatarURL     string `json:"largeBackdropAvatarUrl" js:"largeBackdropAvatarUrl"`
			ThumbnailBackdropAvatarURL string `json:"thumbnailBackdropAvatarUrl" js:"thumbnailBackdropAvatarUrl"`
		} `json:"defaultBackdrop" js:"defaultBackdrop"`
		AvatarID                  interface{} `json:"avatarId" js:"avatarId"`
		FrameAvatarID             interface{} `json:"frameAvatarId" js:"frameAvatarId"`
		BackdropAvatarID          interface{} `json:"backdropAvatarId" js:"backdropAvatarId"`
		SmallBackdropAvatarID     interface{} `json:"smallBackdropAvatarId" js:"smallBackdropAvatarId"`
		LargeBackdropAvatarID     interface{} `json:"largeBackdropAvatarId" js:"largeBackdropAvatarId"`
		ThumbnailBackdropAvatarID interface{} `json:"thumbnailBackdropAvatarId" js:"thumbnailBackdropAvatarId"`
		ThemeColorID              int         `json:"themeColorId" js:"themeColorId"`
		ThemeColor                struct {
			*js.Object

			BackgroundColor string      `json:"backgroundColor" js:"backgroundColor"`
			ClassID         int         `json:"classId" js:"classId"`
			Name            string      `json:"name" js:"name"`
			RaceID          interface{} `json:"raceId" js:"raceId"`
			SubRaceID       interface{} `json:"subRaceId" js:"subRaceId"`
			Tags            []string    `json:"tags" js:"tags"`
			ThemeColor      string      `json:"themeColor" js:"themeColor"`
			ThemeColorID    int         `json:"themeColorId" js:"themeColorId"`
			DecorationKey   interface{} `json:"decorationKey" js:"decorationKey"`
		} `json:"themeColor" js:"themeColor"`
		Name               string      `json:"name" js:"name"`
		SocialName         interface{} `json:"socialName" js:"socialName"`
		Gender             string      `json:"gender" js:"gender"`
		Faith              string      `json:"faith" js:"faith"`
		Age                int         `json:"age" js:"age"`
		Hair               string      `json:"hair" js:"hair"`
		Eyes               string      `json:"eyes" js:"eyes"`
		Skin               string      `json:"skin" js:"skin"`
		Height             string      `json:"height" js:"height"`
		Weight             int         `json:"weight" js:"weight"`
		Inspiration        bool        `json:"inspiration" js:"inspiration"`
		BaseHitPoints      int         `json:"baseHitPoints" js:"baseHitPoints"`
		BonusHitPoints     interface{} `json:"bonusHitPoints" js:"bonusHitPoints"`
		OverrideHitPoints  interface{} `json:"overrideHitPoints" js:"overrideHitPoints"`
		RemovedHitPoints   int         `json:"removedHitPoints" js:"removedHitPoints"`
		TemporaryHitPoints int         `json:"temporaryHitPoints" js:"temporaryHitPoints"`
		CurrentXp          int         `json:"currentXp" js:"alignmentId"`
		AlignmentID        int         `json:"alignmentId" js:"lifestyleId"`
		LifestyleID        int         `json:"lifestyleId" js:"lifestyleId"`
		Stats              []struct {
			*js.Object

			ID    int         `json:"id" js:"id"`
			Name  interface{} `json:"name" js:"name"`
			Value int         `json:"value" js:"value"`
		} `json:"stats" js:"stats"`
		BonusStats []struct {
			*js.Object

			ID    int         `json:"id" js:"id"`
			Name  interface{} `json:"name" js:"name"`
			Value int         `json:"value" js:"value"`
		} `json:"bonusStats" js:"bonusStats"`
		OverrideStats []struct {
			*js.Object

			ID    int         `json:"id" js:"id"`
			Name  interface{} `json:"name" js:"name"`
			Value interface{} `json:"value" js:"value"`
		} `json:"overrideStats" js:"overrideStats"`
		Background struct {
			*js.Object

			CustomBackground struct {
				*js.Object

				BackgroundType                        interface{} `json:"backgroundType" js:"backgroundType"`
				CharacteristicsBackground             interface{} `json:"characteristicsBackground" js:"characteristicsBackground"`
				CharacteristicsBackgroundDefinitionID interface{} `json:"characteristicsBackgroundDefinitionId" js:"characteristicsBackgroundDefinitionId"`
				Description                           interface{} `json:"description" js:"description"`
				EntityTypeID                          int         `json:"entityTypeId" js:"entityTypeId"`
				FeaturesBackground                    interface{} `json:"featuresBackground" js:"featuresBackground"`
				FeaturesBackgroundDefinitionID        interface{} `json:"featuresBackgroundDefinitionId" js:"featuresBackgroundDefinitionId"`
				ID                                    int         `json:"id" js:"id"`
				Name                                  interface{} `json:"name" js:"name"`
			} `json:"customBackground" js:"customBackground"`
			Definition struct {
				*js.Object

				AvatarURL interface{} `json:"avatarUrl" js:"avatarUrl"`
				Bonds     []struct {
					*js.Object

					Description string `json:"description" js:"description"`
					DiceRoll    int    `json:"diceRoll" js:"diceRoll"`
					ID          int    `json:"id" js:"id"`
				} `json:"bonds" js:"bonds"`
				ContractsDescription string `json:"contractsDescription" js:"contractsDescription"`
				Description          string `json:"description" js:"description"`
				EntityTypeID         int    `json:"entityTypeId" js:"entityTypeId"`
				EquipmentDescription string `json:"equipmentDescription" js:"equipmentDescription"`
				FeatureDescription   string `json:"featureDescription" js:"featureDescription"`
				FeatureName          string `json:"featureName" js:"featureName"`
				Flaws                []struct {
					*js.Object

					Description string `json:"description" js:"description"`
					DiceRoll    int    `json:"diceRoll" js:"diceRoll"`
					ID          int    `json:"id" js:"id"`
				} `json:"flaws" js:"flaws"`
				ID     int `json:"id" js:"id"`
				Ideals []struct {
					*js.Object

					Description string `json:"description" js:"description"`
					DiceRoll    int    `json:"diceRoll" js:"diceRoll"`
					ID          int    `json:"id" js:"id"`
				} `json:"ideals" js:"ideals"`
				LanguagesDescription string      `json:"languagesDescription" js:"languagesDescription"`
				LargeAvatarURL       interface{} `json:"largeAvatarUrl" js:"largeAvatarUrl"`
				Name                 string      `json:"name" js:"name"`
				Organization         interface{} `json:"organization" js:"organization"`
				PersonalityTraits    []struct {
					*js.Object

					Description string `json:"description" js:"description"`
					DiceRoll    int    `json:"diceRoll" js:"diceRoll"`
					ID          int    `json:"id" js:"id"`
				} `json:"personalityTraits" js:"personalityTraits"`
				ShortDescription                    string      `json:"shortDescription" js:"shortDescription"`
				SkillProficienciesDescription       string      `json:"skillProficienciesDescription" js:"skillProficienciesDescription"`
				Snippet                             string      `json:"snippet" js:"snippet"`
				SpellsPostDescription               string      `json:"spellsPostDescription" js:"spellsPostDescription"`
				SpellsPreDescription                string      `json:"spellsPreDescription" js:"spellsPreDescription"`
				SuggestedCharacteristicsDescription string      `json:"suggestedCharacteristicsDescription" js:"suggestedCharacteristicsDescription"`
				SuggestedLanguages                  interface{} `json:"suggestedLanguages" js:"suggestedLanguages"`
				SuggestedProficiencies              interface{} `json:"suggestedProficiencies" js:"suggestedProficiencies"`
				ToolProficienciesDescription        string      `json:"toolProficienciesDescription" js:"toolProficienciesDescription"`
				IsHomebrew                          bool        `json:"isHomebrew" js:"isHomebrew"`
				Sources                             []struct {
					*js.Object

					SourceID   int         `json:"sourceId" js:"sourceId"`
					PageNumber interface{} `json:"pageNumber" js:"pageNumber"`
					SourceType int         `json:"sourceType" js:"sourceType"`
				} `json:"sources" js:"sources"`
				SpellListIds []interface{} `json:"spellListIds" js:"spellListIds"`
			} `json:"definition" js:"definition"`
			DefinitionID        interface{} `json:"definitionId" js:"definitionId"`
			HasCustomBackground bool        `json:"hasCustomBackground" js:"hasCustomBackground"`
		} `json:"background" js:"background"`
		Race struct {
			*js.Object

			IsSubRace         bool          `json:"isSubRace" js:"isSubRace"`
			BaseRaceName      string        `json:"baseRaceName" js:"baseRaceName"`
			EntityRaceID      int           `json:"entityRaceId" js:"entityRaceId"`
			EntityRaceTypeID  int           `json:"entityRaceTypeId" js:"entityRaceTypeId"`
			FullName          string        `json:"fullName" js:"fullName"`
			BaseRaceID        int           `json:"baseRaceId" js:"baseRaceId"`
			BaseRaceTypeID    int           `json:"baseRaceTypeId" js:"baseRaceTypeId"`
			Description       string        `json:"description" js:"description"`
			AvatarURL         interface{}   `json:"avatarUrl" js:"avatarUrl"`
			LargeAvatarURL    interface{}   `json:"largeAvatarUrl" js:"largeAvatarUrl"`
			PortraitAvatarURL string        `json:"portraitAvatarUrl" js:"portraitAvatarUrl"`
			MoreDetailsURL    string        `json:"moreDetailsUrl" js:"moreDetailsUrl"`
			IsHomebrew        bool          `json:"isHomebrew" js:"isHomebrew"`
			SourceIds         []interface{} `json:"sourceIds" js:"sourceIds"`
			GroupIds          []int         `json:"groupIds" js:"groupIds"`
			Type              int           `json:"type" js:"type"`
			SubRaceShortName  string        `json:"subRaceShortName" js:"subRaceShortName"`
			BaseName          string        `json:"baseName" js:"baseName"`
			RacialTraits      []struct {
				*js.Object

				Definition struct {
					*js.Object

					ID                            int           `json:"id" js:"id"`
					DefinitionKey                 string        `json:"definitionKey" js:"definitionKey"`
					EntityTypeID                  int           `json:"entityTypeId" js:"entityTypeId"`
					DisplayOrder                  int           `json:"displayOrder" js:"displayOrder"`
					Name                          string        `json:"name" js:"name"`
					Description                   string        `json:"description" js:"description"`
					Snippet                       string        `json:"snippet" js:"snippet"`
					HideInBuilder                 bool          `json:"hideInBuilder" js:"hideInBuilder"`
					HideInSheet                   bool          `json:"hideInSheet" js:"hideInSheet"`
					Activation                    interface{}   `json:"activation" js:"activation"`
					SourceID                      int           `json:"sourceId" js:"sourceId"`
					SourcePageNumber              int           `json:"sourcePageNumber" js:"sourcePageNumber"`
					CreatureRules                 []interface{} `json:"creatureRules" js:"creatureRules"`
					SpellListIds                  []interface{} `json:"spellListIds" js:"spellListIds"`
					FeatureType                   int           `json:"featureType" js:"featureType"`
					Sources                       interface{}   `json:"sources" js:"sources"`
					AffectedFeatureDefinitionKeys []interface{} `json:"affectedFeatureDefinitionKeys" js:"affectedFeatureDefinitionKeys"`
					IsCalledOut                   bool          `json:"isCalledOut" js:"isCalledOut"`
				} `json:"definition" js:"definition"`
			} `json:"racialTraits" js:"racialTraits"`
			WeightSpeeds struct {
				*js.Object

				Encumbered        interface{} `json:"encumbered" js:"encumbered"`
				HeavilyEncumbered interface{} `json:"heavilyEncumbered" js:"heavilyEncumbered"`
				Normal            struct {
					*js.Object

					Burrow int `json:"burrow" js:"burrow"`
					Climb  int `json:"climb" js:"climb"`
					Fly    int `json:"fly" js:"fly"`
					Swim   int `json:"swim" js:"swim"`
					Walk   int `json:"walk" js:"walk"`
				} `json:"normal" js:"normal"`
				Override     interface{} `json:"override" js:"override"`
				PushDragLift interface{} `json:"pushDragLift" js:"pushDragLift"`
			} `json:"weightSpeeds" js:"weightSpeeds"`
			FeatIds         []interface{} `json:"featIds" js:"featIds"`
			Size            interface{}   `json:"size" js:"size"`
			SizeID          int           `json:"sizeId" js:"sizeId"`
			SupportsSubrace interface{}   `json:"supportsSubrace" js:"supportsSubrace"`
			Sources         []struct {
				*js.Object

				SourceID   int         `json:"sourceId" js:"sourceId"`
				PageNumber interface{} `json:"pageNumber" js:"pageNumber"`
				SourceType int         `json:"sourceType" js:"sourceType"`
			} `json:"sources" js:"sources"`
		} `json:"race" js:"race"`
		RaceDefinitionID     interface{} `json:"raceDefinitionId" js:"raceDefinitionId"`
		RaceDefinitionTypeID interface{} `json:"raceDefinitionTypeId" js:"raceDefinitionTypeId"`
		Notes                struct {
			*js.Object

			Allies              string      `json:"allies" js:"allies"`
			Backstory           string      `json:"backstory" js:"backstory"`
			Enemies             string      `json:"enemies" js:"enemies"`
			Organizations       string      `json:"organizations" js:"organizations"`
			OtherHoldings       interface{} `json:"otherHoldings" js:"otherHoldings"`
			OtherNotes          string      `json:"otherNotes" js:"otherNotes"`
			PersonalPossessions string      `json:"personalPossessions" js:"personalPossessions"`
		} `json:"notes" js:"notes"`
		Traits struct {
			*js.Object

			Appearance        string `json:"appearance" js:"appearance"`
			Bonds             string `json:"bonds" js:"bonds"`
			Flaws             string `json:"flaws" js:"flaws"`
			Ideals            string `json:"ideals" js:"ideals"`
			PersonalityTraits string `json:"personalityTraits" js:"personalityTraits"`
		} `json:"traits" js:"traits"`
		Preferences struct {
			*js.Object

			AbilityScoreDisplayType     int  `json:"abilityScoreDisplayType" js:"abilityScoreDisplayType"`
			EncumbranceType             int  `json:"encumbranceType" js:"encumbranceType"`
			EnforceFeatRules            bool `json:"enforceFeatRules" js:"enforceFeatRules"`
			EnforceMulticlassRules      bool `json:"enforceMulticlassRules" js:"enforceMulticlassRules"`
			ShowScaledSpells            bool `json:"showScaledSpells" js:"showScaledSpells"`
			HitPointType                int  `json:"hitPointType" js:"hitPointType"`
			IgnoreCoinWeight            bool `json:"ignoreCoinWeight" js:"ignoreCoinWeight"`
			PrimaryMovement             int  `json:"primaryMovement" js:"primaryMovement"`
			PrimarySense                int  `json:"primarySense" js:"primarySense"`
			PrivacyType                 int  `json:"privacyType" js:"privacyType"`
			ProgressionType             int  `json:"progressionType" js:"progressionType"`
			SharingType                 int  `json:"sharingType" js:"sharingType"`
			ShowUnarmedStrike           bool `json:"showUnarmedStrike" js:"showUnarmedStrike"`
			UseHomebrewContent          bool `json:"useHomebrewContent" js:"useHomebrewContent"`
			EnableOptionalClassFeatures bool `json:"enableOptionalClassFeatures" js:"enableOptionalClassFeatures"`
			EnableOptionalOrigins       bool `json:"enableOptionalOrigins" js:"enableOptionalOrigins"`
		} `json:"preferences" js:"preferences"`
		Configuration struct {
			*js.Object

			AbilityScoreType      int         `json:"abilityScoreType" js:"abilityScoreType"`
			ShowHelpText          bool        `json:"showHelpText" js:"showHelpText"`
			StartingEquipmentType interface{} `json:"startingEquipmentType" js:"startingEquipmentType"`
		} `json:"configuration" js:"configuration"`
		Lifestyle interface{} `json:"lifestyle" js:"lifestyle"`
		Inventory []struct {
			*js.Object

			ChargesUsed int `json:"chargesUsed" js:"chargesUsed"`
			Definition  struct {
				*js.Object

				ArmorClass            int         `json:"armorClass" js:"armorClass"`
				AttackType            interface{} `json:"attackType" js:"attackType"`
				AttunementDescription string      `json:"attunementDescription" js:"attunementDescription"`
				AvatarURL             interface{} `json:"avatarUrl" js:"avatarUrl"`
				BaseArmorName         interface{} `json:"baseArmorName" js:"baseItemId"`
				BaseItemID            interface{} `json:"baseItemId" js:"baseItemId"`
				BaseTypeID            int         `json:"baseTypeId" js:"baseTypeId"`
				BundleSize            int         `json:"bundleSize" js:"bundleSize"`
				CanAttune             bool        `json:"canAttune" js:"canAttune"`
				CanEquip              bool        `json:"canEquip" js:"canEquip"`
				CategoryID            interface{} `json:"categoryId" js:"categoryId"`
				Cost                  interface{} `json:"cost" js:"cost"`
				Damage                struct {
					*js.Object

					DiceCount      int         `json:"diceCount" js:"diceCount" js:"diceCount" js:"diceCount"`
					DiceValue      int         `json:"diceValue" js:"diceValue" js:"diceValue" js:"diceValue"`
					DiceMultiplier interface{} `json:"diceMultiplier" js:"diceMultiplier" js:"diceMultiplier" js:"diceMultiplier"`
					FixedValue     interface{} `json:"fixedValue" js:"fixedValue" js:"fixedValue" js:"fixedValue"`
					DiceString     string      `json:"diceString" js:"diceString" js:"diceString" js:"diceString"`
				} `json:"damage" js:"damage"`
				DamageType       interface{}   `json:"damageType" js:"damageType"`
				Description      string        `json:"description" js:"description"`
				EntityTypeID     int           `json:"entityTypeId" js:"entityTypeId"`
				FilterType       string        `json:"filterType" js:"filterType"`
				FixedDamage      interface{}   `json:"fixedDamage" js:"fixedDamage"`
				GrantedModifiers []interface{} `json:"grantedModifiers" js:"grantedModifiers"`
				ID               int           `json:"id" js:"id"`
				IsConsumable     bool          `json:"isConsumable" js:"isConsumable"`
				IsHomebrew       bool          `json:"isHomebrew" js:"isHomebrew"`
				IsMonkWeapon     bool          `json:"isMonkWeapon" js:"isMonkWeapon"`
				IsPack           bool          `json:"isPack" js:"isPack"`
				LargeAvatarURL   interface{}   `json:"largeAvatarUrl" js:"largeAvatarUrl"`
				LongRange        interface{}   `json:"longRange" js:"longRange"`
				Magic            bool          `json:"magic" js:"magic"`
				Name             string        `json:"name" js:"name"`
				Properties       []struct {
					*js.Object

					ID          int    `json:"id" js:"id" js:"id" js:"id"`
					Name        string `json:"name" js:"name" js:"name" js:"name"`
					Description string `json:"description" js:"description" js:"description" js:"description"`
					Notes       string `json:"notes" js:"notes" js:"notes" js:"notes"`
				} `json:"properties" js:"properties"`
				Range                interface{}   `json:"range" js:"range"`
				Rarity               string        `json:"rarity" js:"rarity"`
				Snippet              string        `json:"snippet" js:"snippet"`
				SourceID             interface{}   `json:"sourceId" js:"sourceId"`
				SourcePageNumber     interface{}   `json:"sourcePageNumber" js:"sourcePageNumber"`
				Stackable            bool          `json:"stackable" js:"stackable"`
				StealthCheck         int           `json:"stealthCheck" js:"stealthCheck"`
				StrengthRequirement  int           `json:"strengthRequirement" js:"strengthRequirement"`
				SubType              interface{}   `json:"subType" js:"subType"`
				Tags                 []string      `json:"tags" js:"tags"`
				Type                 string        `json:"type" js:"type"`
				Version              interface{}   `json:"version" js:"version"`
				WeaponBehaviors      []interface{} `json:"weaponBehaviors" js:"weaponBehaviors"`
				Weight               float64       `json:"weight" js:"weight"`
				LevelInfusionGranted interface{}   `json:"levelInfusionGranted" js:"levelInfusionGranted"`
				Sources              []struct {
					*js.Object

					SourceID   int         `json:"sourceId" js:"sourceId"`
					PageNumber interface{} `json:"pageNumber" js:"pageNumber"`
					SourceType int         `json:"sourceType" js:"sourceType"`
				} `json:"sources" js:"sources"`
				ArmorTypeID           interface{} `json:"armorTypeId" js:"armorTypeId"`
				GearTypeID            int         `json:"gearTypeId" js:"gearTypeId"`
				GroupedID             interface{} `json:"groupedId" js:"groupedId"`
				CanBeAddedToInventory bool        `json:"canBeAddedToInventory" js:"canBeAddedToInventory"`
			} `json:"definition" js:"definition"`
			DefinitionID     int         `json:"definitionId" js:"definitionId"`
			DefinitionTypeID int         `json:"definitionTypeId" js:"definitionTypeId"`
			DisplayAsAttack  interface{} `json:"displayAsAttack" js:"displayAsAttack"`
			EntityTypeID     int         `json:"entityTypeId" js:"entityTypeId"`
			Equipped         bool        `json:"equipped" js:"equipped"`
			ID               int         `json:"id" js:"id"`
			IsAttuned        bool        `json:"isAttuned" js:"isAttuned"`
			LimitedUse       struct {
				*js.Object

				MaxUses              int    `json:"maxUses" js:"maxUses"`
				NumberUsed           int    `json:"numberUsed" js:"numberUsed"`
				ResetType            string `json:"resetType" js:"resetType"`
				ResetTypeDescription string `json:"resetTypeDescription" js:"resetTypeDescription"`
			} `json:"limitedUse" js:"limitedUse"`
			Quantity int `json:"quantity" js:"quantity"`
		} `json:"inventory" js:"inventory"`
		Currencies struct {
			*js.Object

			Cp int `json:"cp" js:"cp"`
			Ep int `json:"ep" js:"ep"`
			Gp int `json:"gp" js:"gp"`
			Pp int `json:"pp" js:"pp"`
			Sp int `json:"sp" js:"sp"`
		} `json:"currencies" js:"currencies"`
		Classes []struct {
			*js.Object

			ClassFeatures []struct {
				*js.Object

				Definition struct {
					*js.Object

					DefinitionKey                 string        `json:"definitionKey" js:"definitionKey"`
					Activation                    interface{}   `json:"activation" js:"activation"`
					CreatureRules                 []interface{} `json:"creatureRules" js:"creatureRules"`
					Description                   string        `json:"description" js:"description"`
					DisplayOrder                  int           `json:"displayOrder" js:"displayOrder"`
					EntityTypeID                  int           `json:"entityTypeId" js:"entityTypeId"`
					HideInBuilder                 bool          `json:"hideInBuilder" js:"hideInBuilder"`
					HideInSheet                   bool          `json:"hideInSheet" js:"hideInSheet"`
					ID                            int           `json:"id" js:"id"`
					IsSubClassFeature             bool          `json:"isSubClassFeature" js:"isSubClassFeature"`
					LevelScales                   interface{}   `json:"levelScales" js:"levelScales"`
					LimitedUse                    []interface{} `json:"limitedUse" js:"limitedUse"`
					MultiClassDescription         string        `json:"multiClassDescription" js:"multiClassDescription"`
					Name                          string        `json:"name" js:"name"`
					RequiredLevel                 int           `json:"requiredLevel" js:"requiredLevel"`
					Snippet                       string        `json:"snippet" js:"snippet"`
					SourceID                      int           `json:"sourceId" js:"sourceId"`
					SourcePageNumber              int           `json:"sourcePageNumber" js:"sourcePageNumber"`
					InfusionRules                 []interface{} `json:"infusionRules" js:"infusionRules"`
					SpellListIds                  []interface{} `json:"spellListIds" js:"spellListIds"`
					ClassID                       int           `json:"classId" js:"classId"`
					FeatureType                   int           `json:"featureType" js:"featureType"`
					Sources                       interface{}   `json:"sources" js:"sources"`
					AffectedFeatureDefinitionKeys []interface{} `json:"affectedFeatureDefinitionKeys" js:"affectedFeatureDefinitionKeys"`
				} `json:"definition" js:"definition"`
				LevelScale interface{} `json:"levelScale" js:"levelScale"`
			} `json:"classFeatures" js:"classFeatures"`
			Definition struct {
				*js.Object

				AvatarURL               string      `json:"avatarUrl" js:"avatarUrl"`
				CanCastSpells           bool        `json:"canCastSpells" js:"canCastSpells"`
				ClassFeatureDefinitions interface{} `json:"classFeatureDefinitions" js:"classFeatureDefinitions"`
				ClassFeatures           []struct {
					*js.Object

					Description   string      `json:"description" js:"description"`
					DisplayOrder  int         `json:"displayOrder" js:"displayOrder"`
					ID            int         `json:"id" js:"id"`
					Name          string      `json:"name" js:"name"`
					Prerequisite  interface{} `json:"prerequisite" js:"prerequisite"`
					RequiredLevel int         `json:"requiredLevel" js:"requiredLevel"`
				} `json:"classFeatures" js:"classFeatures"`
				Description           string        `json:"description" js:"description"`
				EquipmentDescription  string        `json:"equipmentDescription" js:"equipmentDescription"`
				HitDice               int           `json:"hitDice" js:"hitDice"`
				ID                    int           `json:"id" js:"id"`
				KnowsAllSpells        bool          `json:"knowsAllSpells" js:"knowsAllSpells"`
				LargeAvatarURL        string        `json:"largeAvatarUrl" js:"largeAvatarUrl"`
				MoreDetailsURL        string        `json:"moreDetailsUrl" js:"moreDetailsUrl"`
				Name                  string        `json:"name" js:"name"`
				ParentClassID         interface{}   `json:"parentClassId" js:"parentClassId"`
				PortraitAvatarURL     string        `json:"portraitAvatarUrl" js:"portraitAvatarUrl"`
				SourceID              interface{}   `json:"sourceId" js:"sourceId"`
				SourceIds             []interface{} `json:"sourceIds" js:"sourceIds"`
				SourcePageNumber      int           `json:"sourcePageNumber" js:"sourcePageNumber"`
				SpellCastingAbilityID int           `json:"spellCastingAbilityId" js:"spellCastingAbilityId"`
				SpellContainerName    interface{}   `json:"spellContainerName" js:"spellContainerName"`
				SpellPrepareType      interface{}   `json:"spellPrepareType" js:"spellPrepareType"`
				SubclassDefinition    interface{}   `json:"subclassDefinition" js:"subclassDefinition"`
				WealthDice            struct {
					*js.Object

					DiceCount      int         `json:"diceCount" js:"diceCount"`
					DiceMultiplier int         `json:"diceMultiplier" js:"diceMultiplier"`
					DiceString     string      `json:"diceString" js:"diceString"`
					DiceValue      int         `json:"diceValue" js:"diceValue"`
					FixedValue     interface{} `json:"fixedValue" js:"fixedValue"`
				} `json:"wealthDice" js:"wealthDice"`
				IsHomebrew bool `json:"isHomebrew" js:"isHomebrew"`
				Sources    []struct {
					*js.Object

					SourceID   int `json:"sourceId" js:"sourceId"`
					PageNumber int `json:"pageNumber" js:"pageNumber"`
					SourceType int `json:"sourceType" js:"sourceType"`
				} `json:"sources" js:"sources"`
				Prerequisites []struct {
					*js.Object

					Description          string `json:"description" js:"description"`
					PrerequisiteMappings []struct {
						*js.Object

						EntityID            int    `json:"entityId" js:"entityId"`
						EntityTypeID        int    `json:"entityTypeId" js:"entityTypeId"`
						FriendlySubTypeName string `json:"friendlySubTypeName" js:"friendlySubTypeName"`
						FriendlyTypeName    string `json:"friendlyTypeName" js:"friendlyTypeName"`
						ID                  int    `json:"id" js:"id" js:"id" js:"id"`
						SubType             string `json:"subType" js:"subType"`
						Type                string `json:"type" js:"type"`
						Value               int    `json:"value" js:"value"`
					} `json:"prerequisiteMappings" js:"prerequisiteMappings"`
				} `json:"prerequisites" js:"prerequisites"`
				PrimaryAbilities []int `json:"primaryAbilities" js:"primaryAbilities"`
				SpellRules       struct {
					*js.Object

					IsRitualSpellCaster         bool    `json:"isRitualSpellCaster" js:"isRitualSpellCaster"`
					LevelCantripsKnownMaxes     []int   `json:"levelCantripsKnownMaxes" js:"levelCantripsKnownMaxes"`
					LevelSpellKnownMaxes        []int   `json:"levelSpellKnownMaxes" js:"levelSpellKnownMaxes"`
					LevelSpellSlots             [][]int `json:"levelSpellSlots" js:"levelSpellSlots"`
					MultiClassSpellSlotDivisor  int     `json:"multiClassSpellSlotDivisor" js:"multiClassSpellSlotDivisor"`
					MultiClassSpellSlotRounding int     `json:"multiClassSpellSlotRounding" js:"multiClassSpellSlotRounding"`
				} `json:"spellRules" js:"spellRules"`
			} `json:"definition" js:"definition"`
			DefinitionID       int  `json:"definitionId" js:"definitionId"`
			EntityTypeID       int  `json:"entityTypeId" js:"entityTypeId"`
			HitDiceUsed        int  `json:"hitDiceUsed" js:"hitDiceUsed"`
			ID                 int  `json:"id" js:"id"`
			IsStartingClass    bool `json:"isStartingClass" js:"isStartingClass"`
			Level              int  `json:"level" js:"level"`
			SubclassDefinition struct {
				*js.Object

				AvatarURL               interface{} `json:"avatarUrl" js:"avatarUrl"`
				CanCastSpells           bool        `json:"canCastSpells" js:"canCastSpells"`
				ClassFeatureDefinitions interface{} `json:"classFeatureDefinitions" js:"classFeatureDefinitions"`
				ClassFeatures           []struct {
					*js.Object

					Description   string      `json:"description" js:"description"`
					DisplayOrder  int         `json:"displayOrder" js:"displayOrder"`
					ID            int         `json:"id" js:"id"`
					Name          string      `json:"name" js:"name"`
					Prerequisite  interface{} `json:"prerequisite" js:"prerequisite"`
					RequiredLevel int         `json:"requiredLevel" js:"requiredLevel"`
				} `json:"classFeatures" js:"classFeatures"`
				Description           string        `json:"description" js:"description"`
				EquipmentDescription  interface{}   `json:"equipmentDescription" js:"equipmentDescription"`
				HitDice               int           `json:"hitDice" js:"hitDice"`
				ID                    int           `json:"id" js:"id"`
				KnowsAllSpells        bool          `json:"knowsAllSpells" js:"knowsAllSpells"`
				LargeAvatarURL        interface{}   `json:"largeAvatarUrl" js:"largeAvatarUrl"`
				MoreDetailsURL        string        `json:"moreDetailsUrl" js:"moreDetailsUrl"`
				Name                  string        `json:"name" js:"name"`
				ParentClassID         int           `json:"parentClassId" js:"parentClassId"`
				PortraitAvatarURL     interface{}   `json:"portraitAvatarUrl" js:"portraitAvatarUrl"`
				SourceID              interface{}   `json:"sourceId" js:"sourceId"`
				SourceIds             []interface{} `json:"sourceIds" js:"sourceIds"`
				SourcePageNumber      int           `json:"sourcePageNumber" js:"sourcePageNumber"`
				SpellCastingAbilityID int           `json:"spellCastingAbilityId" js:"spellCastingAbilityId"`
				SpellContainerName    interface{}   `json:"spellContainerName" js:"spellContainerName"`
				SpellPrepareType      interface{}   `json:"spellPrepareType" js:"spellPrepareType"`
				SubclassDefinition    interface{}   `json:"subclassDefinition" js:"subclassDefinition"`
				WealthDice            interface{}   `json:"wealthDice" js:"wealthDice"`
				IsHomebrew            bool          `json:"isHomebrew" js:"isHomebrew"`
				Sources               []struct {
					*js.Object

					SourceID   int `json:"sourceId" js:"sourceId"`
					PageNumber int `json:"pageNumber" js:"pageNumber"`
					SourceType int `json:"sourceType" js:"sourceType"`
				} `json:"sources" js:"sources"`
				Prerequisites    interface{} `json:"prerequisites" js:"prerequisites"`
				PrimaryAbilities interface{} `json:"primaryAbilities" js:"primaryAbilities"`
				SpellRules       interface{} `json:"spellRules" js:"spellRules"`
			} `json:"subclassDefinition" js:"subclassDefinition"`
			SubclassDefinitionID interface{} `json:"subclassDefinitionId" js:"subclassDefinitionId"`
		} `json:"classes" js:"classes"`
		Feats                    []interface{} `json:"feats" js:"feats"`
		CustomDefenseAdjustments []interface{} `json:"customDefenseAdjustments" js:"customDefenseAdjustments"`
		CustomSenses             []interface{} `json:"customSenses" js:"customSenses"`
		CustomSpeeds             []interface{} `json:"customSpeeds" js:"customSpeeds"`
		CustomProficiencies      []interface{} `json:"customProficiencies" js:"customProficiencies"`
		SpellDefenses            interface{}   `json:"spellDefenses" js:"spellDefenses"`
		CustomActions            []struct {
			*js.Object

			ActionType             int         `json:"actionType" js:"actionType"`
			ActivationTime         interface{} `json:"activationTime" js:"activationTime"`
			ActivationType         int         `json:"activationType" js:"activationType"`
			AoeSize                interface{} `json:"aoeSize" js:"aoeSize"`
			AoeType                int         `json:"aoeType" js:"aoeType"`
			AttackSubtype          interface{} `json:"attackSubtype" js:"attackSubtype"`
			DamageBonus            interface{} `json:"damageBonus" js:"damageBonus"`
			DamageTypeID           int         `json:"damageTypeId" js:"damageTypeId"`
			Description            interface{} `json:"description" js:"description"`
			DiceCount              int         `json:"diceCount" js:"diceCount"`
			DiceType               int         `json:"diceType" js:"diceType"`
			DisplayAsAttack        interface{} `json:"displayAsAttack" js:"displayAsAttack"`
			EntityTypeID           string      `json:"entityTypeId" js:"entityTypeId"`
			FixedSaveDc            interface{} `json:"fixedSaveDc" js:"fixedSaveDc"`
			FixedValue             interface{} `json:"fixedValue" js:"fixedValue"`
			ID                     string      `json:"id" js:"id"`
			IsMartialArts          bool        `json:"isMartialArts" js:"isMartialArts"`
			IsOffhand              interface{} `json:"isOffhand" js:"isOffhand"`
			IsProficient           bool        `json:"isProficient" js:"isProficient"`
			IsSilvered             bool        `json:"isSilvered" js:"isSilvered"`
			LongRange              interface{} `json:"longRange" js:"longRange"`
			Name                   string      `json:"name" js:"name"`
			OnMissDescription      interface{} `json:"onMissDescription" js:"onMissDescription"`
			Range                  interface{} `json:"range" js:"range"`
			RangeID                int         `json:"rangeId" js:"rangeId"`
			SaveFailDescription    interface{} `json:"saveFailDescription" js:"saveFailDescription"`
			SaveStatID             int         `json:"saveStatId" js:"saveStatId"`
			SaveSuccessDescription interface{} `json:"saveSuccessDescription" js:"saveSuccessDescription"`
			Snippet                string      `json:"snippet" js:"snippet"`
			SpellRangeType         interface{} `json:"spellRangeType" js:"spellRangeType"`
			StatID                 int         `json:"statId" js:"statId"`
			ToHitBonus             interface{} `json:"toHitBonus" js:"toHitBonus"`
		} `json:"customActions" js:"customActions"`
		CharacterValues []struct {
			*js.Object

			ContextID     interface{} `json:"contextId" js:"contextId"`
			ContextTypeID interface{} `json:"contextTypeId" js:"contextTypeId"`
			Notes         interface{} `json:"notes" js:"notes"`
			TypeID        int         `json:"typeId" js:"typeId"`
			Value         bool        `json:"value" js:"value"`
			ValueID       string      `json:"valueId" js:"valueId"`
			ValueTypeID   string      `json:"valueTypeId" js:"valueTypeId"`
		} `json:"characterValues" js:"characterValues"`
		Conditions []struct {
			*js.Object

			ID    int         `json:"id" js:"id"`
			Level interface{} `json:"level" js:"level"`
		} `json:"conditions" js:"conditions"`
		DeathSaves struct {
			*js.Object

			FailCount    interface{} `json:"failCount" js:"failCount"`
			IsStabilized bool        `json:"isStabilized" js:"isStabilized"`
			SuccessCount interface{} `json:"successCount" js:"successCount"`
		} `json:"deathSaves" js:"deathSaves"`
		AdjustmentXp interface{} `json:"adjustmentXp" js:"adjustmentXp"`
		SpellSlots   []struct {
			*js.Object

			Available int `json:"available" js:"available"`
			Level     int `json:"level" js:"level"`
			Used      int `json:"used" js:"used"`
		} `json:"spellSlots" js:"spellSlots"`
		PactMagic []struct {
			*js.Object

			Available int `json:"available" js:"available"`
			Level     int `json:"level" js:"level"`
			Used      int `json:"used" js:"used"`
		} `json:"pactMagic" js:"pactMagic"`
		ActiveSourceCategories []int `json:"activeSourceCategories" js:"activeSourceCategories"`
		Spells                 struct {
			*js.Object

			Background interface{}   `json:"background" js:"background"`
			Class      []interface{} `json:"class" js:"class"`
			Feat       []interface{} `json:"feat" js:"feat"`
			Item       []struct {
				*js.Object

				Activation struct {
					*js.Object

					ActivationTime int `json:"activationTime" js:"activationTime"`
					ActivationType int `json:"activationType" js:"activationType"`
				} `json:"activation" js:"activation"`
				AdditionalDescription interface{} `json:"additionalDescription" js:"additionalDescription"`
				AlwaysPrepared        bool        `json:"alwaysPrepared" js:"alwaysPrepared"`
				AtWillLimitedUseLevel interface{} `json:"atWillLimitedUseLevel" js:"atWillLimitedUseLevel"`
				BaseLevelAtWill       bool        `json:"baseLevelAtWill" js:"baseLevelAtWill"`
				CastAtLevel           interface{} `json:"castAtLevel" js:"castAtLevel"`
				CastOnlyAsRitual      bool        `json:"castOnlyAsRitual" js:"castOnlyAsRitual"`
				ComponentID           int         `json:"componentId" js:"componentId"`
				ComponentTypeID       int         `json:"componentTypeId" js:"componentTypeId"`
				CountsAsKnownSpell    interface{} `json:"countsAsKnownSpell" js:"countsAsKnownSpell"`
				Definition            struct {
					*js.Object

					Activation struct {
						*js.Object

						ActivationTime int `json:"activationTime" js:"activationTime"`
						ActivationType int `json:"activationType" js:"activationType"`
					} `json:"activation" js:"activation"`
					AsPartOfWeaponAttack bool `json:"asPartOfWeaponAttack" js:"asPartOfWeaponAttack"`
					AtHigherLevels       struct {
						*js.Object

						AdditionalAttacks      []interface{} `json:"additionalAttacks" js:"additionalAttacks"`
						AdditionalTargets      []interface{} `json:"additionalTargets" js:"additionalTargets"`
						AreaOfEffect           []interface{} `json:"areaOfEffect" js:"areaOfEffect"`
						Creatures              []interface{} `json:"creatures" js:"creatures"`
						Duration               []interface{} `json:"duration" js:"duration"`
						HigherLevelDefinitions []interface{} `json:"higherLevelDefinitions" js:"higherLevelDefinitions"`
						Points                 []interface{} `json:"points" js:"points"`
						ScaleType              interface{}   `json:"scaleType" js:"scaleType"`
						Special                []interface{} `json:"special" js:"special"`
					} `json:"atHigherLevels" js:"atHigherLevels"`
					AttackType             interface{} `json:"attackType" js:"attackType"`
					CanCastAtHigherLevel   bool        `json:"canCastAtHigherLevel" js:"canCastAtHigherLevel"`
					CastingTimeDescription string      `json:"castingTimeDescription" js:"castingTimeDescription"`
					Components             []int       `json:"components" js:"components"`
					ComponentsDescription  string      `json:"componentsDescription" js:"componentsDescription"`
					Concentration          bool        `json:"concentration" js:"concentration"`
					Conditions             []struct {
						*js.Object

						ConditionDuration int    `json:"conditionDuration" js:"conditionDuration"`
						ConditionID       int    `json:"conditionId" js:"conditionId"`
						DurationUnit      string `json:"durationUnit" js:"durationUnit"`
						Exception         string `json:"exception" js:"exception"`
						Type              int    `json:"type" js:"type"`
					} `json:"conditions" js:"conditions"`
					DamageEffect interface{} `json:"damageEffect" js:"damageEffect"`
					Description  string      `json:"description" js:"description"`
					Duration     struct {
						*js.Object

						DurationInterval int    `json:"durationInterval" js:"durationInterval"`
						DurationUnit     string `json:"durationUnit" js:"durationUnit"`
						DurationType     string `json:"durationType" js:"durationType"`
					} `json:"duration" js:"duration"`
					Healing     interface{}   `json:"healing" js:"healing"`
					HealingDice []interface{} `json:"healingDice" js:"healingDice"`
					ID          int           `json:"id" js:"id"`
					IsHomebrew  bool          `json:"isHomebrew" js:"isHomebrew"`
					Level       int           `json:"level" js:"level"`
					Modifiers   []interface{} `json:"modifiers" js:"modifiers"`
					Name        string        `json:"name" js:"name"`
					Range       struct {
						*js.Object

						AoeType    string `json:"aoeType" js:"aoeType"`
						AoeValue   int    `json:"aoeValue" js:"aoeValue"`
						Origin     string `json:"origin" js:"origin"`
						RangeValue int    `json:"rangeValue" js:"rangeValue"`
					} `json:"range" js:"range"`
					RangeArea           interface{}   `json:"rangeArea" js:"rangeArea"`
					RequiresAttackRoll  bool          `json:"requiresAttackRoll" js:"requiresAttackRoll"`
					RequiresSavingThrow bool          `json:"requiresSavingThrow" js:"requiresSavingThrow"`
					Ritual              bool          `json:"ritual" js:"ritual"`
					SaveDcAbilityID     int           `json:"saveDcAbilityId" js:"saveDcAbilityId"`
					School              string        `json:"school" js:"school"`
					Snippet             string        `json:"snippet" js:"snippet"`
					SourceID            interface{}   `json:"sourceId" js:"sourceId"`
					SourcePageNumber    int           `json:"sourcePageNumber" js:"sourcePageNumber"`
					Tags                []string      `json:"tags" js:"tags"`
					TempHpDice          []interface{} `json:"tempHpDice" js:"tempHpDice"`
					Version             interface{}   `json:"version" js:"version"`
					Sources             []struct {
						*js.Object

						SourceID   int         `json:"sourceId" js:"sourceId"`
						PageNumber interface{} `json:"pageNumber" js:"pageNumber"`
						SourceType int         `json:"sourceType" js:"sourceType"`
					} `json:"sources" js:"sources"`
					ScaleType interface{} `json:"scaleType" js:"scaleType"`
				} `json:"definition" js:"definition"`
				DefinitionID     int         `json:"definitionId" js:"definitionId"`
				DisplayAsAttack  bool        `json:"displayAsAttack" js:"displayAsAttack"`
				EntityTypeID     int         `json:"entityTypeId" js:"entityTypeId"`
				ID               int         `json:"id" js:"id"`
				IsSignatureSpell interface{} `json:"isSignatureSpell" js:"isSignatureSpell"`
				LimitedUse       struct {
					*js.Object

					MaxNumberConsumed  int         `json:"maxNumberConsumed" js:"maxNumberConsumed"`
					MaxUses            int         `json:"maxUses" js:"maxUses"`
					MinNumberConsumed  int         `json:"minNumberConsumed" js:"minNumberConsumed"`
					Name               interface{} `json:"name" js:"name"`
					NumberUsed         int         `json:"numberUsed" js:"numberUsed"`
					ResetType          interface{} `json:"resetType" js:"resetType"`
					StatModifierUsesID interface{} `json:"statModifierUsesId" js:"statModifierUsesId"`
					Operator           interface{} `json:"operator" js:"operator"`
					ResetDice          interface{} `json:"resetDice" js:"resetDice"`
				} `json:"limitedUse" js:"limitedUse"`
				OverrideSaveDc int  `json:"overrideSaveDc" js:"overrideSaveDc"`
				Prepared       bool `json:"prepared" js:"prepared"`
				Range          struct {
					*js.Object

					AoeType    string `json:"aoeType" js:"aoeType"`
					AoeValue   int    `json:"aoeValue" js:"aoeValue"`
					Origin     string `json:"origin" js:"origin"`
					RangeValue int    `json:"rangeValue" js:"rangeValue"`
				} `json:"range" js:"range"`
				Restriction           interface{} `json:"restriction" js:"restriction"`
				RitualCastingType     interface{} `json:"ritualCastingType" js:"ritualCastingType"`
				SpellCastingAbilityID interface{} `json:"spellCastingAbilityId" js:"spellCastingAbilityId"`
				UsesSpellSlot         bool        `json:"usesSpellSlot" js:"usesSpellSlot"`
				SpellListID           interface{} `json:"spellListId" js:"spellListId"`
			} `json:"item" js:"item"`
			Race []interface{} `json:"race" js:"race"`
		} `json:"spells" js:"spells"`
		Options struct {
			*js.Object

			Background interface{} `json:"background" js:"background"`
			Class      []struct {
				*js.Object

				ComponentID     int `json:"componentId" js:"componentId"`
				ComponentTypeID int `json:"componentTypeId" js:"componentTypeId"`
				Definition      struct {
					*js.Object

					Activation       interface{}   `json:"activation" js:"activation"`
					CreatureRules    []interface{} `json:"creatureRules" js:"creatureRules"`
					Description      string        `json:"description" js:"description"`
					EntityTypeID     int           `json:"entityTypeId" js:"entityTypeId"`
					ID               int           `json:"id" js:"id"`
					Name             string        `json:"name" js:"name"`
					Snippet          string        `json:"snippet" js:"snippet"`
					SourceID         int           `json:"sourceId" js:"sourceId"`
					SourcePageNumber interface{}   `json:"sourcePageNumber" js:"sourcePageNumber"`
					SpellListIds     []interface{} `json:"spellListIds" js:"spellListIds"`
				} `json:"definition" js:"definition"`
			} `json:"class" js:"class"`
			Feat []interface{} `json:"feat" js:"feat"`
			Item interface{}   `json:"item" js:"item"`
			Race []interface{} `json:"race" js:"race"`
		} `json:"options" js:"options"`
		Choices struct {
			*js.Object

			Background []struct {
				*js.Object

				ComponentID     int      `json:"componentId" js:"componentId"`
				ComponentTypeID int      `json:"componentTypeId" js:"componentTypeId"`
				DefaultSubtypes []string `json:"defaultSubtypes" js:"defaultSubtypes"`
				ID              string   `json:"id" js:"id"`
				IsInfinite      bool     `json:"isInfinite" js:"isInfinite"`
				IsOptional      bool     `json:"isOptional" js:"isOptional"`
				Label           string   `json:"label" js:"label"`
				Options         []struct {
					*js.Object

					Description interface{} `json:"description" js:"description"`
					ID          int         `json:"id" js:"id"`
					Label       string      `json:"label" js:"label"`
				} `json:"options" js:"options"`
				OptionValue    int         `json:"optionValue" js:"optionValue"`
				ParentChoiceID interface{} `json:"parentChoiceId" js:"parentChoiceId"`
				SubType        int         `json:"subType" js:"subType"`
				Type           int         `json:"type" js:"type"`
				DisplayOrder   interface{} `json:"displayOrder" js:"displayOrder"`
			} `json:"background" js:"background"`
			Class []struct {
				*js.Object

				ComponentID     int           `json:"componentId" js:"componentId"`
				ComponentTypeID int           `json:"componentTypeId" js:"componentTypeId"`
				DefaultSubtypes []interface{} `json:"defaultSubtypes" js:"defaultSubtypes"`
				ID              string        `json:"id" js:"id"`
				IsInfinite      bool          `json:"isInfinite" js:"isInfinite"`
				IsOptional      bool          `json:"isOptional" js:"isOptional"`
				Label           interface{}   `json:"label" js:"label"`
				Options         []struct {
					*js.Object

					Description string `json:"description" js:"description"`
					ID          int    `json:"id" js:"id"`
					Label       string `json:"label" js:"label"`
				} `json:"options" js:"options"`
				OptionValue    int         `json:"optionValue" js:"optionValue"`
				ParentChoiceID interface{} `json:"parentChoiceId" js:"parentChoiceId"`
				SubType        interface{} `json:"subType" js:"subType"`
				Type           int         `json:"type" js:"type"`
				DisplayOrder   interface{} `json:"displayOrder" js:"displayOrder"`
			} `json:"class" js:"class"`
			Feat []interface{} `json:"feat" js:"feat"`
			Item interface{}   `json:"item" js:"item"`
			Race []struct {
				*js.Object

				ComponentID     int           `json:"componentId" js:"componentId"`
				ComponentTypeID int           `json:"componentTypeId" js:"componentTypeId"`
				DefaultSubtypes []interface{} `json:"defaultSubtypes" js:"defaultSubtypes"`
				ID              string        `json:"id" js:"id"`
				IsInfinite      bool          `json:"isInfinite" js:"isInfinite"`
				IsOptional      bool          `json:"isOptional" js:"isOptional"`
				Label           string        `json:"label" js:"label"`
				Options         []struct {
					*js.Object

					Description interface{} `json:"description" js:"description"`
					ID          int         `json:"id" js:"id"`
					Label       string      `json:"label" js:"label"`
				} `json:"options" js:"options"`
				OptionValue    int         `json:"optionValue" js:"optionValue"`
				ParentChoiceID interface{} `json:"parentChoiceId" js:"parentChoiceId"`
				SubType        int         `json:"subType" js:"subType"`
				Type           int         `json:"type" js:"type"`
				DisplayOrder   interface{} `json:"displayOrder" js:"displayOrder"`
			} `json:"race" js:"race"`
		} `json:"choices" js:"choices"`
		Actions struct {
			*js.Object

			Background interface{} `json:"background" js:"background"`
			Class      []struct {
				*js.Object

				AbilityModifierStatID interface{} `json:"abilityModifierStatId" js:"abilityModifierStatId"`
				ActionType            int         `json:"actionType" js:"actionType"`
				Activation            struct {
					*js.Object

					ActivationTime int `json:"activationTime" js:"activationTime"`
					ActivationType int `json:"activationType" js:"activationType"`
				} `json:"activation" js:"activation"`
				AttackSubtype   interface{} `json:"attackSubtype" js:"attackSubtype"`
				AttackTypeRange interface{} `json:"attackTypeRange" js:"attackTypeRange"`
				ComponentID     int         `json:"componentId" js:"componentId"`
				ComponentTypeID int         `json:"componentTypeId" js:"componentTypeId"`
				DamageTypeID    interface{} `json:"damageTypeId" js:"damageTypeId"`
				Description     string      `json:"description" js:"description"`
				Dice            interface{} `json:"dice" js:"dice"`
				DisplayAsAttack interface{} `json:"displayAsAttack" js:"displayAsAttack"`
				EntityTypeID    string      `json:"entityTypeId" js:"entityTypeId"`
				FixedSaveDc     interface{} `json:"fixedSaveDc" js:"fixedSaveDc"`
				FixedToHit      interface{} `json:"fixedToHit" js:"fixedToHit"`
				ID              string      `json:"id" js:"id"`
				IsMartialArts   bool        `json:"isMartialArts" js:"isMartialArts"`
				IsProficient    bool        `json:"isProficient" js:"isProficient"`
				LimitedUse      struct {
					*js.Object

					MaxNumberConsumed  int         `json:"maxNumberConsumed" js:"maxNumberConsumed"`
					MaxUses            int         `json:"maxUses" js:"maxUses"`
					MinNumberConsumed  int         `json:"minNumberConsumed" js:"minNumberConsumed"`
					Name               interface{} `json:"name" js:"name"`
					NumberUsed         int         `json:"numberUsed" js:"numberUsed"`
					ResetType          int         `json:"resetType" js:"resetType"`
					StatModifierUsesID interface{} `json:"statModifierUsesId" js:"statModifierUsesId"`
					Operator           int         `json:"operator" js:"operator"`
					ResetDice          interface{} `json:"resetDice" js:"resetDice"`
				} `json:"limitedUse" js:"limitedUse"`
				Name              string      `json:"name" js:"name"`
				NumberOfTargets   interface{} `json:"numberOfTargets" js:"numberOfTargets"`
				OnMissDescription string      `json:"onMissDescription" js:"onMissDescription"`
				Range             struct {
					*js.Object

					HasAoeSpecialDescription bool        `json:"hasAoeSpecialDescription" js:"hasAoeSpecialDescription"`
					AoeSize                  interface{} `json:"aoeSize" js:"aoeSize"`
					AoeType                  interface{} `json:"aoeType" js:"aoeType"`
					LongRange                interface{} `json:"longRange" js:"longRange"`
					MinimumRange             interface{} `json:"minimumRange" js:"minimumRange"`
					Range                    interface{} `json:"range" js:"range"`
				} `json:"range" js:"range"`
				SaveFailDescription    string      `json:"saveFailDescription" js:"saveFailDescription"`
				SaveStatID             interface{} `json:"saveStatId" js:"saveStatId"`
				SaveSuccessDescription string      `json:"saveSuccessDescription" js:"saveSuccessDescription"`
				Snippet                string      `json:"snippet" js:"snippet"`
				SpellRangeType         interface{} `json:"spellRangeType" js:"spellRangeType"`
				Value                  interface{} `json:"value" js:"value"`
				Ammunition             interface{} `json:"ammunition" js:"ammunition"`
			} `json:"class" js:"class"`
			Feat []interface{} `json:"feat" js:"feat"`
			Item interface{}   `json:"item" js:"item"`
			Race []interface{} `json:"race" js:"race"`
		} `json:"actions" js:"actions"`
		Modifiers struct {
			*js.Object

			Background []struct {
				*js.Object

				AvailableToMulticlass bool          `json:"availableToMulticlass" js:"availableToMulticlass"`
				BonusTypes            []interface{} `json:"bonusTypes" js:"bonusTypes"`
				Dice                  interface{}   `json:"dice" js:"dice"`
				Duration              interface{}   `json:"duration" js:"duration"`
				EntityID              int           `json:"entityId" js:"entityId"`
				EntityTypeID          int           `json:"entityTypeId" js:"entityTypeId"`
				FixedValue            interface{}   `json:"fixedValue" js:"fixedValue"`
				FriendlySubtypeName   string        `json:"friendlySubtypeName" js:"friendlySubtypeName"`
				FriendlyTypeName      string        `json:"friendlyTypeName" js:"friendlyTypeName"`
				ID                    string        `json:"id" js:"id"`
				IsGranted             bool          `json:"isGranted" js:"isGranted"`
				ModifierSubTypeID     int           `json:"modifierSubTypeId" js:"modifierSubTypeId"`
				ModifierTypeID        int           `json:"modifierTypeId" js:"modifierTypeId"`
				RequiresAttunement    bool          `json:"requiresAttunement" js:"requiresAttunement"`
				Restriction           string        `json:"restriction" js:"restriction"`
				StatID                interface{}   `json:"statId" js:"statId"`
				SubType               string        `json:"subType" js:"subType"`
				Type                  string        `json:"type" js:"type"`
				Value                 interface{}   `json:"value" js:"value"`
				ComponentID           int           `json:"componentId" js:"componentId"`
				ComponentTypeID       int           `json:"componentTypeId" js:"componentTypeId"`
			} `json:"background" js:"background"`
			Class []struct {
				*js.Object

				AvailableToMulticlass bool          `json:"availableToMulticlass" js:"availableToMulticlass"`
				BonusTypes            []interface{} `json:"bonusTypes" js:"bonusTypes"`
				Dice                  interface{}   `json:"dice" js:"dice"`
				Duration              interface{}   `json:"duration" js:"duration"`
				EntityID              interface{}   `json:"entityId" js:"entityId"`
				EntityTypeID          interface{}   `json:"entityTypeId" js:"entityTypeId"`
				FixedValue            interface{}   `json:"fixedValue" js:"fixedValue"`
				FriendlySubtypeName   string        `json:"friendlySubtypeName" js:"friendlySubtypeName"`
				FriendlyTypeName      string        `json:"friendlyTypeName" js:"friendlyTypeName"`
				ID                    string        `json:"id" js:"id"`
				IsGranted             bool          `json:"isGranted" js:"isGranted"`
				ModifierSubTypeID     int           `json:"modifierSubTypeId" js:"modifierSubTypeId"`
				ModifierTypeID        int           `json:"modifierTypeId" js:"modifierTypeId"`
				RequiresAttunement    bool          `json:"requiresAttunement" js:"requiresAttunement"`
				Restriction           string        `json:"restriction" js:"restriction"`
				StatID                interface{}   `json:"statId" js:"statId"`
				SubType               string        `json:"subType" js:"subType"`
				Type                  string        `json:"type" js:"type"`
				Value                 interface{}   `json:"value" js:"value"`
				ComponentID           int           `json:"componentId" js:"componentId"`
				ComponentTypeID       int           `json:"componentTypeId" js:"componentTypeId"`
			} `json:"class" js:"class"`
			Condition []interface{} `json:"condition" js:"condition"`
			Feat      []interface{} `json:"feat" js:"feat"`
			Item      []interface{} `json:"item" js:"item"`
			Race      []struct {
				*js.Object

				AvailableToMulticlass bool          `json:"availableToMulticlass" js:"availableToMulticlass"`
				BonusTypes            []interface{} `json:"bonusTypes" js:"bonusTypes"`
				Dice                  interface{}   `json:"dice" js:"dice"`
				Duration              interface{}   `json:"duration" js:"duration"`
				EntityID              int           `json:"entityId" js:"entityId"`
				EntityTypeID          int           `json:"entityTypeId" js:"entityTypeId"`
				FixedValue            int           `json:"fixedValue" js:"fixedValue"`
				FriendlySubtypeName   string        `json:"friendlySubtypeName" js:"friendlySubtypeName"`
				FriendlyTypeName      string        `json:"friendlyTypeName" js:"friendlyTypeName"`
				ID                    string        `json:"id" js:"id"`
				IsGranted             bool          `json:"isGranted" js:"isGranted"`
				ModifierSubTypeID     int           `json:"modifierSubTypeId" js:"modifierSubTypeId"`
				ModifierTypeID        int           `json:"modifierTypeId" js:"modifierTypeId"`
				RequiresAttunement    bool          `json:"requiresAttunement" js:"requiresAttunement"`
				Restriction           string        `json:"restriction" js:"restriction"`
				StatID                interface{}   `json:"statId" js:"statId"`
				SubType               string        `json:"subType" js:"subType"`
				Type                  string        `json:"type" js:"type"`
				Value                 int           `json:"value" js:"value"`
				ComponentID           int           `json:"componentId" js:"componentId"`
				ComponentTypeID       int           `json:"componentTypeId" js:"componentTypeId"`
			} `json:"race" js:"race"`
		} `json:"modifiers" js:"modifiers"`
		ClassSpells []struct {
			*js.Object

			CharacterClassID int `json:"characterClassId" js:"characterClassId"`
			EntityTypeID     int `json:"entityTypeId" js:"entityTypeId"`
			Spells           []struct {
				*js.Object

				Activation struct {
					*js.Object

					ActivationTime int `json:"activationTime" js:"activationTime"`
					ActivationType int `json:"activationType" js:"activationType"`
				} `json:"activation" js:"activation"`
				AdditionalDescription interface{} `json:"additionalDescription" js:"additionalDescription"`
				AlwaysPrepared        bool        `json:"alwaysPrepared" js:"alwaysPrepared"`
				AtWillLimitedUseLevel interface{} `json:"atWillLimitedUseLevel" js:"atWillLimitedUseLevel"`
				BaseLevelAtWill       bool        `json:"baseLevelAtWill" js:"baseLevelAtWill"`
				CastAtLevel           interface{} `json:"castAtLevel" js:"castAtLevel"`
				CastOnlyAsRitual      bool        `json:"castOnlyAsRitual" js:"castOnlyAsRitual"`
				ComponentID           int         `json:"componentId" js:"componentId"`
				ComponentTypeID       int         `json:"componentTypeId" js:"componentTypeId"`
				CountsAsKnownSpell    bool        `json:"countsAsKnownSpell" js:"countsAsKnownSpell"`
				Definition            struct {
					*js.Object

					Activation struct {
						*js.Object

						ActivationTime int `json:"activationTime" js:"activationTime"`
						ActivationType int `json:"activationType" js:"activationType"`
					} `json:"activation" js:"activation"`
					AsPartOfWeaponAttack bool `json:"asPartOfWeaponAttack" js:"asPartOfWeaponAttack"`
					AtHigherLevels       struct {
						*js.Object

						AdditionalAttacks      []interface{} `json:"additionalAttacks" js:"additionalAttacks"`
						AdditionalTargets      []interface{} `json:"additionalTargets" js:"additionalTargets"`
						AreaOfEffect           []interface{} `json:"areaOfEffect" js:"areaOfEffect"`
						Creatures              []interface{} `json:"creatures" js:"creatures"`
						Duration               []interface{} `json:"duration" js:"duration"`
						HigherLevelDefinitions []interface{} `json:"higherLevelDefinitions" js:"higherLevelDefinitions"`
						Points                 []interface{} `json:"points" js:"points"`
						ScaleType              string        `json:"scaleType" js:"scaleType"`
						Special                []interface{} `json:"special" js:"special"`
					} `json:"atHigherLevels" js:"atHigherLevels"`
					AttackType             int           `json:"attackType" js:"attackType"`
					CanCastAtHigherLevel   bool          `json:"canCastAtHigherLevel" js:"canCastAtHigherLevel"`
					CastingTimeDescription string        `json:"castingTimeDescription" js:"castingTimeDescription"`
					Components             []int         `json:"components" js:"components"`
					ComponentsDescription  string        `json:"componentsDescription" js:"componentsDescription"`
					Concentration          bool          `json:"concentration" js:"concentration"`
					Conditions             []interface{} `json:"conditions" js:"conditions"`
					DamageEffect           interface{}   `json:"damageEffect" js:"damageEffect"`
					Description            string        `json:"description" js:"description"`
					Duration               struct {
						*js.Object

						DurationInterval int    `json:"durationInterval" js:"durationInterval"`
						DurationUnit     string `json:"durationUnit" js:"durationUnit"`
						DurationType     string `json:"durationType" js:"durationType"`
					} `json:"duration" js:"duration"`
					Healing     interface{}   `json:"healing" js:"healing"`
					HealingDice []interface{} `json:"healingDice" js:"healingDice"`
					ID          int           `json:"id" js:"id"`
					IsHomebrew  bool          `json:"isHomebrew" js:"isHomebrew"`
					Level       int           `json:"level" js:"level"`
					Modifiers   []struct {
						*js.Object

						AtHigherLevels struct {
							*js.Object

							AdditionalAttacks      []interface{} `json:"additionalAttacks" js:"additionalAttacks"`
							AdditionalTargets      []interface{} `json:"additionalTargets" js:"additionalTargets"`
							AreaOfEffect           []interface{} `json:"areaOfEffect" js:"areaOfEffect"`
							Creatures              []interface{} `json:"creatures" js:"creatures"`
							Duration               []interface{} `json:"duration" js:"duration"`
							HigherLevelDefinitions []struct {
								*js.Object

								Details string `json:"details" js:"details"`
								Dice    struct {
									*js.Object

									DiceCount      int         `json:"diceCount" js:"diceCount"`
									DiceMultiplier interface{} `json:"diceMultiplier" js:"diceMultiplier"`
									DiceString     string      `json:"diceString" js:"diceString"`
									DiceValue      int         `json:"diceValue" js:"diceValue"`
									FixedValue     int         `json:"fixedValue" js:"fixedValue"`
								} `json:"dice" js:"dice"`
								Level  int         `json:"level" js:"level"`
								TypeID int         `json:"typeId" js:"typeId"`
								Value  interface{} `json:"value" js:"value"`
							} `json:"higherLevelDefinitions" js:"higherLevelDefinitions"`
							Points    []interface{} `json:"points" js:"points"`
							ScaleType string        `json:"scaleType" js:"scaleType"`
							Special   []interface{} `json:"special" js:"special"`
						} `json:"atHigherLevels" js:"atHigherLevels"`
						Count int `json:"count" js:"count"`
						Die   struct {
							*js.Object

							DiceCount      int         `json:"diceCount" js:"diceCount"`
							DiceMultiplier interface{} `json:"diceMultiplier" js:"diceMultiplier"`
							DiceString     string      `json:"diceString" js:"diceString"`
							DiceValue      int         `json:"diceValue" js:"diceValue"`
							FixedValue     int         `json:"fixedValue" js:"fixedValue"`
						} `json:"die" js:"die"`
						DurationUnit          interface{}   `json:"durationUnit" js:"durationUnit"`
						UsePrimaryStat        bool          `json:"usePrimaryStat" js:"usePrimaryStat"`
						AvailableToMulticlass interface{}   `json:"availableToMulticlass" js:"availableToMulticlass"`
						BonusTypes            []interface{} `json:"bonusTypes" js:"bonusTypes"`
						Dice                  interface{}   `json:"dice" js:"dice"`
						Duration              interface{}   `json:"duration" js:"duration"`
						EntityID              interface{}   `json:"entityId" js:"entityId"`
						EntityTypeID          interface{}   `json:"entityTypeId" js:"entityTypeId"`
						FixedValue            interface{}   `json:"fixedValue" js:"fixedValue"`
						FriendlySubtypeName   string        `json:"friendlySubtypeName" js:"friendlySubtypeName"`
						FriendlyTypeName      string        `json:"friendlyTypeName" js:"friendlyTypeName"`
						ID                    string        `json:"id" js:"id"`
						IsGranted             bool          `json:"isGranted" js:"isGranted"`
						ModifierSubTypeID     int           `json:"modifierSubTypeId" js:"modifierSubTypeId"`
						ModifierTypeID        int           `json:"modifierTypeId" js:"modifierTypeId"`
						RequiresAttunement    bool          `json:"requiresAttunement" js:"requiresAttunement"`
						Restriction           string        `json:"restriction" js:"restriction"`
						StatID                interface{}   `json:"statId" js:"statId"`
						SubType               string        `json:"subType" js:"subType"`
						Type                  string        `json:"type" js:"type"`
						Value                 interface{}   `json:"value" js:"value"`
						ComponentID           int           `json:"componentId" js:"componentId"`
						ComponentTypeID       int           `json:"componentTypeId" js:"componentTypeId"`
					} `json:"modifiers" js:"modifiers"`
					Name  string `json:"name" js:"name"`
					Range struct {
						*js.Object

						AoeType    string `json:"aoeType" js:"aoeType"`
						AoeValue   int    `json:"aoeValue" js:"aoeValue"`
						Origin     string `json:"origin" js:"origin"`
						RangeValue int    `json:"rangeValue" js:"rangeValue"`
					} `json:"range" js:"range"`
					RangeArea           interface{}   `json:"rangeArea" js:"rangeArea"`
					RequiresAttackRoll  bool          `json:"requiresAttackRoll" js:"requiresAttackRoll"`
					RequiresSavingThrow bool          `json:"requiresSavingThrow" js:"requiresSavingThrow"`
					Ritual              bool          `json:"ritual" js:"ritual"`
					SaveDcAbilityID     interface{}   `json:"saveDcAbilityId" js:"saveDcAbilityId"`
					School              string        `json:"school" js:"school"`
					Snippet             string        `json:"snippet" js:"snippet"`
					SourceID            interface{}   `json:"sourceId" js:"sourceId"`
					SourcePageNumber    int           `json:"sourcePageNumber" js:"sourcePageNumber"`
					Tags                []string      `json:"tags" js:"tags"`
					TempHpDice          []interface{} `json:"tempHpDice" js:"tempHpDice"`
					Version             interface{}   `json:"version" js:"version"`
					Sources             []struct {
						*js.Object

						SourceID   int         `json:"sourceId" js:"sourceId"`
						PageNumber interface{} `json:"pageNumber" js:"pageNumber"`
						SourceType int         `json:"sourceType" js:"sourceType"`
					} `json:"sources" js:"sources"`
					ScaleType string `json:"scaleType" js:"scaleType"`
				} `json:"definition" js:"definition"`
				DefinitionID     int         `json:"definitionId" js:"definitionId"`
				DisplayAsAttack  interface{} `json:"displayAsAttack" js:"displayAsAttack"`
				EntityTypeID     int         `json:"entityTypeId" js:"entityTypeId"`
				ID               int         `json:"id" js:"id"`
				IsSignatureSpell interface{} `json:"isSignatureSpell" js:"isSignatureSpell"`
				LimitedUse       interface{} `json:"limitedUse" js:"limitedUse"`
				OverrideSaveDc   interface{} `json:"overrideSaveDc" js:"overrideSaveDc"`
				Prepared         bool        `json:"prepared" js:"prepared"`
				Range            struct {
					*js.Object

					AoeType    interface{} `json:"aoeType" js:"aoeType"`
					AoeValue   interface{} `json:"aoeValue" js:"aoeValue"`
					Origin     string      `json:"origin" js:"origin"`
					RangeValue int         `json:"rangeValue" js:"rangeValue"`
				} `json:"range" js:"range"`
				Restriction           interface{} `json:"restriction" js:"restriction"`
				RitualCastingType     interface{} `json:"ritualCastingType" js:"ritualCastingType"`
				SpellCastingAbilityID interface{} `json:"spellCastingAbilityId" js:"spellCastingAbilityId"`
				UsesSpellSlot         bool        `json:"usesSpellSlot" js:"usesSpellSlot"`
				SpellListID           interface{} `json:"spellListId" js:"spellListId"`
			} `json:"spells" js:"spells"`
		} `json:"classSpells" js:"classSpells"`
		CustomItems []interface{} `json:"customItems" js:"customItems"`
		Campaign    interface{}   `json:"campaign" js:"campaign"`
		Creatures   []struct {
			*js.Object

			ID                 int         `json:"id" js:"id"`
			EntityTypeID       int         `json:"entityTypeId" js:"entityTypeId"`
			Name               string      `json:"name" js:"name"`
			Description        interface{} `json:"description" js:"description"`
			IsActive           bool        `json:"isActive" js:"isActive"`
			RemovedHitPoints   int         `json:"removedHitPoints" js:"removedHitPoints"`
			TemporaryHitPoints interface{} `json:"temporaryHitPoints" js:"temporaryHitPoints"`
			GroupID            int         `json:"groupId" js:"groupId"`
			Definition         struct {
				*js.Object

				ID                    int    `json:"id" js:"id"`
				EntityTypeID          int    `json:"entityTypeId" js:"entityTypeId"`
				Name                  string `json:"name" js:"name"`
				AlignmentID           int    `json:"alignmentId" js:"alignmentId"`
				SizeID                int    `json:"sizeId" js:"sizeId"`
				TypeID                int    `json:"typeId" js:"typeId"`
				ArmorClass            int    `json:"armorClass" js:"armorClass"`
				ArmorClassDescription string `json:"armorClassDescription" js:"armorClassDescription"`
				AverageHitPoints      int    `json:"averageHitPoints" js:"averageHitPoints"`
				HitPointDice          struct {
					*js.Object

					DiceCount      int         `json:"diceCount" js:"diceCount"`
					DiceMultiplier interface{} `json:"diceMultiplier" js:"diceMultiplier"`
					DiceString     string      `json:"diceString" js:"diceString"`
					DiceValue      int         `json:"diceValue" js:"diceValue"`
					FixedValue     int         `json:"fixedValue" js:"fixedValue"`
				} `json:"hitPointDice" js:"hitPointDice"`
				Movements []struct {
					*js.Object

					MovementID int    `json:"movementId" js:"movementId"`
					Speed      int    `json:"speed" js:"speed"`
					Notes      string `json:"notes" js:"notes"`
				} `json:"movements" js:"movements"`
				PassivePerception int           `json:"passivePerception" js:"passivePerception"`
				IsHomebrew        bool          `json:"isHomebrew" js:"isHomebrew"`
				ChallengeRatingID int           `json:"challengeRatingId" js:"challengeRatingId"`
				SourceID          int           `json:"sourceId" js:"sourceId"`
				SourcePageNumber  int           `json:"sourcePageNumber" js:"sourcePageNumber"`
				IsLegendary       bool          `json:"isLegendary" js:"isLegendary"`
				HasLair           bool          `json:"hasLair" js:"hasLair"`
				AvatarURL         string        `json:"avatarUrl" js:"avatarUrl"`
				LargeAvatarURL    string        `json:"largeAvatarUrl" js:"largeAvatarUrl"`
				BasicAvatarURL    string        `json:"basicAvatarUrl" js:"basicAvatarUrl"`
				Version           interface{}   `json:"version" js:"version"`
				Swarm             interface{}   `json:"swarm" js:"swarm"`
				SubTypes          []interface{} `json:"subTypes" js:"subTypes"`
				Environments      []int         `json:"environments" js:"environments"`
				Tags              []interface{} `json:"tags" js:"tags"`
				Sources           []struct {
					*js.Object

					SourceID   int         `json:"sourceId" js:"sourceId"`
					PageNumber interface{} `json:"pageNumber" js:"pageNumber"`
					SourceType int         `json:"sourceType" js:"sourceType"`
				} `json:"sources" js:"sources"`
				Stats []struct {
					*js.Object

					StatID int         `json:"statId" js:"statId"`
					Name   interface{} `json:"name" js:"name"`
					Value  int         `json:"value" js:"value"`
				} `json:"stats" js:"stats"`
				Senses []struct {
					*js.Object

					SenseID int    `json:"senseId" js:"senseId"`
					Notes   string `json:"notes" js:"notes"`
				} `json:"senses" js:"senses"`
				DamageAdjustments   []interface{} `json:"damageAdjustments" js:"damageAdjustments"`
				ConditionImmunities []interface{} `json:"conditionImmunities" js:"conditionImmunities"`
				SavingThrows        []struct {
					*js.Object

					StatID        int         `json:"statId" js:"statId"`
					BonusModifier interface{} `json:"bonusModifier" js:"bonusModifier"`
				} `json:"savingThrows" js:"savingThrows"`
				Skills []struct {
					*js.Object

					SkillID         int `json:"skillId" js:"skillId"`
					Value           int `json:"value" js:"value"`
					AdditionalBonus int `json:"additionalBonus" js:"additionalBonus"`
				} `json:"skills" js:"skills"`
				Languages []struct {
					*js.Object

					LanguageID int    `json:"languageId" js:"languageId"`
					Notes      string `json:"notes"`
				} `json:"languages" js:"languages"`
				SpecialTraitsDescription    string `json:"specialTraitsDescription" js:"specialTraitsDescription"`
				ActionsDescription          string `json:"actionsDescription" js:"actionsDescription"`
				ReactionsDescription        string `json:"reactionsDescription" js:"reactionsDescription"`
				LegendaryActionsDescription string `json:"legendaryActionsDescription" js:"legendaryActionsDescription"`
				CharacteristicsDescription  string `json:"characteristicsDescription" js:"characteristicsDescription"`
				LairDescription             string `json:"lairDescription" js:"lairDescription"`
				LanguageDescription         string `json:"languageDescription" js:"languageDescription"`
				LanguageNote                string `json:"languageNote" js:"languageNote"`
			} `json:"definition" js:"definition"`
		} `json:"creatures" js:"creatures"`
		OptionalOrigins       []interface{} `json:"optionalOrigins" js:"optionalOrigins"`
		OptionalClassFeatures []interface{} `json:"optionalClassFeatures" js:"optionalClassFeatures"`
	} `json:"data" js:"data"`
	Pagination interface{} `json:"pagination" js:"pagination"`
}
