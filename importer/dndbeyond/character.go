package beyond

// https://transform.tools/json-to-go
// Replaced *AutoGenerated* with *Character*

type Character struct {
	Character struct {
		ID                         int    `json:"id"`
		ReadonlyURL                string `json:"readonlyUrl"`
		AvatarURL                  string `json:"avatarUrl"`
		FrameAvatarURL             string `json:"frameAvatarUrl"`
		BackdropAvatarURL          string `json:"backdropAvatarUrl"`
		SmallBackdropAvatarURL     string `json:"smallBackdropAvatarUrl"`
		LargeBackdropAvatarURL     string `json:"largeBackdropAvatarUrl"`
		ThumbnailBackdropAvatarURL string `json:"thumbnailBackdropAvatarUrl"`
		DefaultBackdrop            struct {
			BackdropAvatarURL          string `json:"backdropAvatarUrl"`
			SmallBackdropAvatarURL     string `json:"smallBackdropAvatarUrl"`
			LargeBackdropAvatarURL     string `json:"largeBackdropAvatarUrl"`
			ThumbnailBackdropAvatarURL string `json:"thumbnailBackdropAvatarUrl"`
		} `json:"defaultBackdrop"`
		AvatarID              interface{} `json:"avatarId"`
		FrameAvatarID         interface{} `json:"frameAvatarId"`
		BackdropAvatarID      interface{} `json:"backdropAvatarId"`
		SmallBackdropAvatarID interface{} `json:"smallBackdropAvatarId"`
		LargeBackdropAvatarID interface{} `json:"largeBackdropAvatarId"`
		ThumbnailAvatarID     interface{} `json:"thumbnailAvatarId"`
		ThemeColorID          int         `json:"themeColorId"`
		ThemeColor            struct {
			ThemeColorID    int         `json:"themeColorId"`
			ThemeColor      string      `json:"themeColor"`
			BackgroundColor string      `json:"backgroundColor"`
			Name            string      `json:"name"`
			RaceID          interface{} `json:"raceId"`
			SubRaceID       interface{} `json:"subRaceId"`
			ClassID         int         `json:"classId"`
			Tags            []string    `json:"tags"`
		} `json:"themeColor"`
		Name               string      `json:"name"`
		SocialName         interface{} `json:"socialName"`
		Gender             string      `json:"gender"`
		Faith              string      `json:"faith"`
		Age                int         `json:"age"`
		Hair               string      `json:"hair"`
		Eyes               string      `json:"eyes"`
		Skin               string      `json:"skin"`
		Height             string      `json:"height"`
		Weight             int         `json:"weight"`
		Inspiration        bool        `json:"inspiration"`
		BaseHitPoints      int         `json:"baseHitPoints"`
		BonusHitPoints     interface{} `json:"bonusHitPoints"`
		OverrideHitPoints  interface{} `json:"overrideHitPoints"`
		RemovedHitPoints   int         `json:"removedHitPoints"`
		TemporaryHitPoints int         `json:"temporaryHitPoints"`
		CurrentXp          int         `json:"currentXp"`
		AlignmentID        int         `json:"alignmentId"`
		LifestyleID        int         `json:"lifestyleId"`
		Stats              []struct {
			ID    int         `json:"id"`
			Name  interface{} `json:"name"`
			Value int         `json:"value"`
		} `json:"stats"`
		BonusStats []struct {
			ID    int         `json:"id"`
			Name  interface{} `json:"name"`
			Value int         `json:"value"`
		} `json:"bonusStats"`
		OverrideStats []struct {
			ID    int         `json:"id"`
			Name  interface{} `json:"name"`
			Value interface{} `json:"value"`
		} `json:"overrideStats"`
		Background struct {
			HasCustomBackground bool `json:"hasCustomBackground"`
			Definition          struct {
				ID                                  int           `json:"id"`
				EntityTypeID                        int           `json:"entityTypeId"`
				Name                                string        `json:"name"`
				Description                         string        `json:"description"`
				Snippet                             string        `json:"snippet"`
				ShortDescription                    string        `json:"shortDescription"`
				SkillProficienciesDescription       string        `json:"skillProficienciesDescription"`
				ToolProficienciesDescription        string        `json:"toolProficienciesDescription"`
				LanguagesDescription                string        `json:"languagesDescription"`
				EquipmentDescription                string        `json:"equipmentDescription"`
				FeatureName                         string        `json:"featureName"`
				FeatureDescription                  string        `json:"featureDescription"`
				AvatarURL                           interface{}   `json:"avatarUrl"`
				LargeAvatarURL                      interface{}   `json:"largeAvatarUrl"`
				SuggestedCharacteristicsDescription string        `json:"suggestedCharacteristicsDescription"`
				SuggestedProficiencies              []string      `json:"suggestedProficiencies"`
				SuggestedLanguages                  []interface{} `json:"suggestedLanguages"`
				Organization                        interface{}   `json:"organization"`
				ContractsDescription                string        `json:"contractsDescription"`
				SpellsPreDescription                string        `json:"spellsPreDescription"`
				SpellsPostDescription               string        `json:"spellsPostDescription"`
				PersonalityTraits                   []struct {
					ID          int    `json:"id"`
					Description string `json:"description"`
					DiceRoll    int    `json:"diceRoll"`
				} `json:"personalityTraits"`
				Ideals []struct {
					ID          int    `json:"id"`
					Description string `json:"description"`
					DiceRoll    int    `json:"diceRoll"`
				} `json:"ideals"`
				Bonds []struct {
					ID          int    `json:"id"`
					Description string `json:"description"`
					DiceRoll    int    `json:"diceRoll"`
				} `json:"bonds"`
				Flaws []struct {
					ID          int    `json:"id"`
					Description string `json:"description"`
					DiceRoll    int    `json:"diceRoll"`
				} `json:"flaws"`
			} `json:"definition"`
			CustomBackground struct {
				ID                        int         `json:"id"`
				EntityTypeID              int         `json:"entityTypeId"`
				Name                      interface{} `json:"name"`
				Description               interface{} `json:"description"`
				FeaturesBackground        interface{} `json:"featuresBackground"`
				CharacteristicsBackground interface{} `json:"characteristicsBackground"`
				BackgroundType            interface{} `json:"backgroundType"`
			} `json:"customBackground"`
		} `json:"background"`
		Race struct {
			EntityRaceID      int         `json:"entityRaceId"`
			EntityRaceTypeID  int         `json:"entityRaceTypeId"`
			FullName          string      `json:"fullName"`
			BaseRaceID        int         `json:"baseRaceId"`
			BaseRaceTypeID    int         `json:"baseRaceTypeId"`
			Description       string      `json:"description"`
			AvatarURL         interface{} `json:"avatarUrl"`
			LargeAvatarURL    interface{} `json:"largeAvatarUrl"`
			PortraitAvatarURL string      `json:"portraitAvatarUrl"`
			MoreDetailsURL    string      `json:"moreDetailsUrl"`
			IsHomebrew        bool        `json:"isHomebrew"`
			SourceIds         []int       `json:"sourceIds"`
			GroupIds          []int       `json:"groupIds"`
			Type              int         `json:"type"`
			SubRaceShortName  string      `json:"subRaceShortName"`
			BaseName          string      `json:"baseName"`
			RacialTraits      []struct {
				Definition struct {
					ID            int         `json:"id"`
					EntityTypeID  int         `json:"entityTypeId"`
					DisplayOrder  int         `json:"displayOrder"`
					Name          string      `json:"name"`
					Description   string      `json:"description"`
					Snippet       interface{} `json:"snippet"`
					HideInBuilder bool        `json:"hideInBuilder"`
					HideInSheet   bool        `json:"hideInSheet"`
					Activation    struct {
						ActivationTime interface{} `json:"activationTime"`
						ActivationType interface{} `json:"activationType"`
					} `json:"activation"`
					SourceID         int           `json:"sourceId"`
					SourcePageNumber int           `json:"sourcePageNumber"`
					CreatureRules    []interface{} `json:"creatureRules"`
				} `json:"definition"`
			} `json:"racialTraits"`
			WeightSpeeds struct {
				Normal struct {
					Walk   int `json:"walk"`
					Fly    int `json:"fly"`
					Burrow int `json:"burrow"`
					Swim   int `json:"swim"`
					Climb  int `json:"climb"`
				} `json:"normal"`
				Encumbered        interface{} `json:"encumbered"`
				HeavilyEncumbered interface{} `json:"heavilyEncumbered"`
				PushDragLift      interface{} `json:"pushDragLift"`
				Override          interface{} `json:"override"`
			} `json:"weightSpeeds"`
			FeatIds []interface{} `json:"featIds"`
			Size    string        `json:"size"`
			SizeID  int           `json:"sizeId"`
		} `json:"race"`
		Notes struct {
			Allies              string      `json:"allies"`
			PersonalPossessions string      `json:"personalPossessions"`
			OtherHoldings       interface{} `json:"otherHoldings"`
			Organizations       string      `json:"organizations"`
			Enemies             string      `json:"enemies"`
			Backstory           string      `json:"backstory"`
			OtherNotes          string      `json:"otherNotes"`
		} `json:"notes"`
		Traits struct {
			PersonalityTraits string `json:"personalityTraits"`
			Ideals            string `json:"ideals"`
			Bonds             string `json:"bonds"`
			Flaws             string `json:"flaws"`
			Appearance        string `json:"appearance"`
		} `json:"traits"`
		Preferences struct {
			UseHomebrewContent      bool `json:"useHomebrewContent"`
			ProgressionType         int  `json:"progressionType"`
			EncumbranceType         int  `json:"encumbranceType"`
			IgnoreCoinWeight        bool `json:"ignoreCoinWeight"`
			HitPointType            int  `json:"hitPointType"`
			ShowUnarmedStrike       bool `json:"showUnarmedStrike"`
			ShowCompanions          bool `json:"showCompanions"`
			ShowWildShape           bool `json:"showWildShape"`
			PrimarySense            int  `json:"primarySense"`
			PrimaryMovement         int  `json:"primaryMovement"`
			PrivacyType             int  `json:"privacyType"`
			SharingType             int  `json:"sharingType"`
			AbilityScoreDisplayType int  `json:"abilityScoreDisplayType"`
			EnforceFeatRules        bool `json:"enforceFeatRules"`
			EnforceMulticlassRules  bool `json:"enforceMulticlassRules"`
		} `json:"preferences"`
		Lifestyle interface{} `json:"lifestyle"`
		Inventory []struct {
			DisplayAsAttack interface{} `json:"displayAsAttack"`
			ID              int         `json:"id"`
			EntityTypeID    int         `json:"entityTypeId"`
			Definition      struct {
				BaseItemID          int    `json:"baseItemId"`
				BaseArmorName       string `json:"baseArmorName"`
				StrengthRequirement int    `json:"strengthRequirement"`
				ArmorClass          int    `json:"armorClass"`
				StealthCheck        int    `json:"stealthCheck"`
				ArmorTypeID         int    `json:"armorTypeId"`
				Damage              struct {
					DiceCount      int         `json:"diceCount"`
					DiceValue      int         `json:"diceValue"`
					DiceMultiplier interface{} `json:"diceMultiplier"`
					FixedValue     interface{} `json:"fixedValue"`
					DiceString     string      `json:"diceString"`
				} `json:"damage"`
				DamageType  string      `json:"damageType"`
				FixedDamage interface{} `json:"fixedDamage"`
				Properties  []struct {
					ID          int    `json:"id"`
					Name        string `json:"name"`
					Description string `json:"description"`
					Notes       string `json:"notes"`
				} `json:"properties"`
				AttackType            int           `json:"attackType"`
				CategoryID            int           `json:"categoryId"`
				Range                 int           `json:"range"`
				LongRange             int           `json:"longRange"`
				IsMonkWeapon          bool          `json:"isMonkWeapon"`
				WeaponBehaviors       []interface{} `json:"weaponBehaviors"`
				ID                    int           `json:"id"`
				BaseTypeID            int           `json:"baseTypeId"`
				EntityTypeID          int           `json:"entityTypeId"`
				CanEquip              bool          `json:"canEquip"`
				Magic                 bool          `json:"magic"`
				Name                  string        `json:"name"`
				Snippet               interface{}   `json:"snippet"`
				Weight                float64       `json:"weight"`
				Type                  string        `json:"type"`
				Description           string        `json:"description"`
				CanAttune             bool          `json:"canAttune"`
				AttunementDescription interface{}   `json:"attunementDescription"`
				Rarity                string        `json:"rarity"`
				IsHomebrew            bool          `json:"isHomebrew"`
				Version               interface{}   `json:"version"`
				SourceID              interface{}   `json:"sourceId"`
				SourcePageNumber      interface{}   `json:"sourcePageNumber"`
				Stackable             bool          `json:"stackable"`
				BundleSize            int           `json:"bundleSize"`
				AvatarURL             interface{}   `json:"avatarUrl"`
				LargeAvatarURL        interface{}   `json:"largeAvatarUrl"`
				FilterType            string        `json:"filterType"`
				Cost                  float64       `json:"cost"`
				IsPack                bool          `json:"isPack"`
				LevelInfusionGranted  interface{}   `json:"levelInfusionGranted"`
				CanBeAddedToInventory bool          `json:"canBeAddedToInventory"`
				GroupedID             interface{}   `json:"groupedId"`
				Tags                  []string      `json:"tags"`
				GrantedModifiers      []interface{} `json:"grantedModifiers"`
			} `json:"definition"`
			Quantity   int         `json:"quantity"`
			IsAttuned  bool        `json:"isAttuned"`
			Equipped   bool        `json:"equipped"`
			LimitedUse interface{} `json:"limitedUse"`
		} `json:"inventory"`
		Currencies struct {
			Cp int `json:"cp"`
			Sp int `json:"sp"`
			Gp int `json:"gp"`
			Ep int `json:"ep"`
			Pp int `json:"pp"`
		} `json:"currencies"`
		Classes []struct {
			ID              int  `json:"id"`
			EntityTypeID    int  `json:"entityTypeId"`
			Level           int  `json:"level"`
			IsStartingClass bool `json:"isStartingClass"`
			HitDiceUsed     int  `json:"hitDiceUsed"`
			Definition      struct {
				ID                    int         `json:"id"`
				Name                  string      `json:"name"`
				Description           string      `json:"description"`
				EquipmentDescription  string      `json:"equipmentDescription"`
				ParentClassID         interface{} `json:"parentClassId"`
				AvatarURL             string      `json:"avatarUrl"`
				LargeAvatarURL        string      `json:"largeAvatarUrl"`
				PortraitAvatarURL     string      `json:"portraitAvatarUrl"`
				MoreDetailsURL        string      `json:"moreDetailsUrl"`
				SpellCastingAbilityID int         `json:"spellCastingAbilityId"`
				SourceIds             []int       `json:"sourceIds"`
				HitDice               int         `json:"hitDice"`
				ClassFeatures         []struct {
					ID            int         `json:"id"`
					Name          string      `json:"name"`
					Prerequisite  interface{} `json:"prerequisite"`
					Description   string      `json:"description"`
					RequiredLevel int         `json:"requiredLevel"`
					DisplayOrder  int         `json:"displayOrder"`
				} `json:"classFeatures"`
				WealthDice struct {
					DiceCount      int         `json:"diceCount"`
					DiceValue      int         `json:"diceValue"`
					DiceMultiplier int         `json:"diceMultiplier"`
					FixedValue     interface{} `json:"fixedValue"`
					DiceString     string      `json:"diceString"`
				} `json:"wealthDice"`
				CanCastSpells      bool        `json:"canCastSpells"`
				KnowsAllSpells     bool        `json:"knowsAllSpells"`
				SpellPrepareType   interface{} `json:"spellPrepareType"`
				SpellContainerName interface{} `json:"spellContainerName"`
				SourceID           int         `json:"sourceId"`
				SourcePageNumber   int         `json:"sourcePageNumber"`
				PrimaryAbilities   []int       `json:"primaryAbilities"`
				SpellRules         struct {
					MultiClassSpellSlotDivisor  int     `json:"multiClassSpellSlotDivisor"`
					MultiClassSpellSlotRounding int     `json:"multiClassSpellSlotRounding"`
					IsRitualSpellCaster         bool    `json:"isRitualSpellCaster"`
					LevelCantripsKnownMaxes     []int   `json:"levelCantripsKnownMaxes"`
					LevelSpellKnownMaxes        []int   `json:"levelSpellKnownMaxes"`
					LevelSpellSlots             [][]int `json:"levelSpellSlots"`
				} `json:"spellRules"`
				Prerequisites []struct {
					Description          string `json:"description"`
					PrerequisiteMappings []struct {
						ID                  int    `json:"id"`
						EntityID            int    `json:"entityId"`
						EntityTypeID        int    `json:"entityTypeId"`
						Type                string `json:"type"`
						SubType             string `json:"subType"`
						Value               int    `json:"value"`
						FriendlyTypeName    string `json:"friendlyTypeName"`
						FriendlySubTypeName string `json:"friendlySubTypeName"`
					} `json:"prerequisiteMappings"`
				} `json:"prerequisites"`
			} `json:"definition"`
			SubclassDefinition struct {
				ID                    int         `json:"id"`
				Name                  string      `json:"name"`
				Description           string      `json:"description"`
				EquipmentDescription  interface{} `json:"equipmentDescription"`
				ParentClassID         int         `json:"parentClassId"`
				AvatarURL             interface{} `json:"avatarUrl"`
				LargeAvatarURL        interface{} `json:"largeAvatarUrl"`
				PortraitAvatarURL     interface{} `json:"portraitAvatarUrl"`
				MoreDetailsURL        string      `json:"moreDetailsUrl"`
				SpellCastingAbilityID int         `json:"spellCastingAbilityId"`
				SourceIds             []int       `json:"sourceIds"`
				HitDice               int         `json:"hitDice"`
				ClassFeatures         []struct {
					ID            int         `json:"id"`
					Name          string      `json:"name"`
					Prerequisite  interface{} `json:"prerequisite"`
					Description   string      `json:"description"`
					RequiredLevel int         `json:"requiredLevel"`
					DisplayOrder  int         `json:"displayOrder"`
				} `json:"classFeatures"`
				WealthDice         interface{}   `json:"wealthDice"`
				CanCastSpells      bool          `json:"canCastSpells"`
				KnowsAllSpells     bool          `json:"knowsAllSpells"`
				SpellPrepareType   interface{}   `json:"spellPrepareType"`
				SpellContainerName interface{}   `json:"spellContainerName"`
				SourceID           int           `json:"sourceId"`
				SourcePageNumber   int           `json:"sourcePageNumber"`
				PrimaryAbilities   []interface{} `json:"primaryAbilities"`
				SpellRules         interface{}   `json:"spellRules"`
				Prerequisites      interface{}   `json:"prerequisites"`
			} `json:"subclassDefinition"`
			ClassFeatures []struct {
				Definition struct {
					ID           int    `json:"id"`
					EntityTypeID int    `json:"entityTypeId"`
					DisplayOrder int    `json:"displayOrder"`
					Name         string `json:"name"`
					Description  string `json:"description"`
					Snippet      string `json:"snippet"`
					Activation   struct {
						ActivationTime interface{} `json:"activationTime"`
						ActivationType interface{} `json:"activationType"`
					} `json:"activation"`
					MultiClassDescription string        `json:"multiClassDescription"`
					RequiredLevel         int           `json:"requiredLevel"`
					IsSubClassFeature     bool          `json:"isSubClassFeature"`
					LimitedUse            []interface{} `json:"limitedUse"`
					HideInBuilder         bool          `json:"hideInBuilder"`
					HideInSheet           bool          `json:"hideInSheet"`
					SourceID              int           `json:"sourceId"`
					SourcePageNumber      int           `json:"sourcePageNumber"`
					CreatureRules         []interface{} `json:"creatureRules"`
					InfusionRules         []interface{} `json:"infusionRules"`
				} `json:"definition"`
				LevelScale interface{} `json:"levelScale"`
			} `json:"classFeatures"`
		} `json:"classes"`
		Feats                    []interface{} `json:"feats"`
		CustomDefenseAdjustments []interface{} `json:"customDefenseAdjustments"`
		CustomSenses             []interface{} `json:"customSenses"`
		CustomSpeeds             []interface{} `json:"customSpeeds"`
		CustomProficiencies      []interface{} `json:"customProficiencies"`
		SpellDefenses            interface{}   `json:"spellDefenses"`
		CustomActions            []struct {
			ID                     int         `json:"id"`
			EntityTypeID           int         `json:"entityTypeId"`
			Name                   string      `json:"name"`
			ToHitBonus             interface{} `json:"toHitBonus"`
			Description            interface{} `json:"description"`
			Snippet                string      `json:"snippet"`
			IsProficient           bool        `json:"isProficient"`
			IsOffhand              interface{} `json:"isOffhand"`
			StatID                 int         `json:"statId"`
			RangeID                int         `json:"rangeId"`
			DiceCount              int         `json:"diceCount"`
			DiceType               int         `json:"diceType"`
			FixedValue             interface{} `json:"fixedValue"`
			DamageTypeID           int         `json:"damageTypeId"`
			OnMissDescription      interface{} `json:"onMissDescription"`
			SaveFailDescription    interface{} `json:"saveFailDescription"`
			SaveSuccessDescription interface{} `json:"saveSuccessDescription"`
			SaveStatID             int         `json:"saveStatId"`
			FixedSaveDc            interface{} `json:"fixedSaveDc"`
			ActionType             int         `json:"actionType"`
			AttackSubtype          interface{} `json:"attackSubtype"`
			Range                  interface{} `json:"range"`
			LongRange              interface{} `json:"longRange"`
			AoeType                int         `json:"aoeType"`
			AoeSize                interface{} `json:"aoeSize"`
			ActivationTime         interface{} `json:"activationTime"`
			ActivationType         int         `json:"activationType"`
			IsSilvered             bool        `json:"isSilvered"`
			DamageBonus            interface{} `json:"damageBonus"`
			IsMartialArts          bool        `json:"isMartialArts"`
			SpellRangeType         interface{} `json:"spellRangeType"`
			DisplayAsAttack        interface{} `json:"displayAsAttack"`
		} `json:"customActions"`
		CharacterValues []struct {
			TypeID        int         `json:"typeId"`
			Value         bool        `json:"value"`
			Notes         interface{} `json:"notes"`
			ValueID       int         `json:"valueId"`
			ValueTypeID   int         `json:"valueTypeId"`
			ContextID     interface{} `json:"contextId"`
			ContextTypeID interface{} `json:"contextTypeId"`
		} `json:"characterValues"`
		Conditions []struct {
			ID    int         `json:"id"`
			Level interface{} `json:"level"`
		} `json:"conditions"`
		DeathSaves struct {
			FailCount    interface{} `json:"failCount"`
			SuccessCount interface{} `json:"successCount"`
			IsStabilized bool        `json:"isStabilized"`
		} `json:"deathSaves"`
		AdjustmentXp interface{} `json:"adjustmentXp"`
		SpellSlots   []struct {
			Level     int `json:"level"`
			Used      int `json:"used"`
			Available int `json:"available"`
		} `json:"spellSlots"`
		PactMagic []struct {
			Level     int `json:"level"`
			Used      int `json:"used"`
			Available int `json:"available"`
		} `json:"pactMagic"`
		ActiveSourceCategories []int `json:"activeSourceCategories"`
		Spells                 struct {
			Race  []interface{} `json:"race"`
			Class []interface{} `json:"class"`
			Item  []struct {
				OverrideSaveDc int `json:"overrideSaveDc"`
				LimitedUse     struct {
					MinNumberConsumed int `json:"minNumberConsumed"`
					MaxNumberConsumed int `json:"maxNumberConsumed"`
				} `json:"limitedUse"`
				ID           int `json:"id"`
				EntityTypeID int `json:"entityTypeId"`
				Definition   struct {
					ID       int    `json:"id"`
					Name     string `json:"name"`
					Level    int    `json:"level"`
					School   string `json:"school"`
					Duration struct {
						DurationInterval int    `json:"durationInterval"`
						DurationUnit     string `json:"durationUnit"`
						DurationType     string `json:"durationType"`
					} `json:"duration"`
					Activation struct {
						ActivationTime int `json:"activationTime"`
						ActivationType int `json:"activationType"`
					} `json:"activation"`
					Range struct {
						Origin     string `json:"origin"`
						RangeValue int    `json:"rangeValue"`
						AoeType    string `json:"aoeType"`
						AoeValue   int    `json:"aoeValue"`
					} `json:"range"`
					AsPartOfWeaponAttack  bool        `json:"asPartOfWeaponAttack"`
					Description           string      `json:"description"`
					Snippet               string      `json:"snippet"`
					Concentration         bool        `json:"concentration"`
					Ritual                bool        `json:"ritual"`
					RangeArea             interface{} `json:"rangeArea"`
					DamageEffect          interface{} `json:"damageEffect"`
					Components            []int       `json:"components"`
					ComponentsDescription string      `json:"componentsDescription"`
					SaveDcAbilityID       int         `json:"saveDcAbilityId"`
					Healing               interface{} `json:"healing"`
					HealingDice           interface{} `json:"healingDice"`
					TempHpDice            interface{} `json:"tempHpDice"`
					AttackType            interface{} `json:"attackType"`
					CanCastAtHigherLevel  bool        `json:"canCastAtHigherLevel"`
					IsHomebrew            bool        `json:"isHomebrew"`
					Version               interface{} `json:"version"`
					SourceID              int         `json:"sourceId"`
					SourcePageNumber      int         `json:"sourcePageNumber"`
					RequiresSavingThrow   bool        `json:"requiresSavingThrow"`
					RequiresAttackRoll    bool        `json:"requiresAttackRoll"`
					AtHigherLevels        struct {
						ScaleType              interface{}   `json:"scaleType"`
						HigherLevelDefinitions []interface{} `json:"higherLevelDefinitions"`
						AdditionalAttacks      []interface{} `json:"additionalAttacks"`
						AdditionalTargets      []interface{} `json:"additionalTargets"`
						AreaOfEffect           []interface{} `json:"areaOfEffect"`
						Duration               []interface{} `json:"duration"`
						Creatures              []interface{} `json:"creatures"`
						Special                []interface{} `json:"special"`
						Points                 []interface{} `json:"points"`
					} `json:"atHigherLevels"`
					Modifiers  []interface{} `json:"modifiers"`
					Conditions []struct {
						Type              int    `json:"type"`
						ConditionID       int    `json:"conditionId"`
						ConditionDuration int    `json:"conditionDuration"`
						DurationUnit      string `json:"durationUnit"`
						Exception         string `json:"exception"`
					} `json:"conditions"`
					Tags                   []string `json:"tags"`
					CastingTimeDescription string   `json:"castingTimeDescription"`
				} `json:"definition"`
				Prepared              interface{} `json:"prepared"`
				CountsAsKnownSpell    interface{} `json:"countsAsKnownSpell"`
				UsesSpellSlot         interface{} `json:"usesSpellSlot"`
				CastAtLevel           interface{} `json:"castAtLevel"`
				AlwaysPrepared        interface{} `json:"alwaysPrepared"`
				Restriction           interface{} `json:"restriction"`
				SpellCastingAbilityID interface{} `json:"spellCastingAbilityId"`
				DisplayAsAttack       bool        `json:"displayAsAttack"`
				AdditionalDescription interface{} `json:"additionalDescription"`
				CastOnlyAsRitual      bool        `json:"castOnlyAsRitual"`
				RitualCastingType     interface{} `json:"ritualCastingType"`
				Range                 struct {
					Origin     string `json:"origin"`
					RangeValue int    `json:"rangeValue"`
					AoeType    string `json:"aoeType"`
					AoeValue   int    `json:"aoeValue"`
				} `json:"range"`
				Activation struct {
					ActivationTime int `json:"activationTime"`
					ActivationType int `json:"activationType"`
				} `json:"activation"`
				BaseLevelAtWill       bool        `json:"baseLevelAtWill"`
				AtWillLimitedUseLevel interface{} `json:"atWillLimitedUseLevel"`
				ComponentID           int         `json:"componentId"`
				ComponentTypeID       int         `json:"componentTypeId"`
			} `json:"item"`
			Feat []interface{} `json:"feat"`
		} `json:"spells"`
		Options struct {
			Race  []interface{} `json:"race"`
			Class []struct {
				Definition struct {
					ID           int    `json:"id"`
					EntityTypeID int    `json:"entityTypeId"`
					Name         string `json:"name"`
					Description  string `json:"description"`
					Snippet      string `json:"snippet"`
					Activation   struct {
						ActivationTime interface{} `json:"activationTime"`
						ActivationType interface{} `json:"activationType"`
					} `json:"activation"`
					SourceID         int           `json:"sourceId"`
					SourcePageNumber interface{}   `json:"sourcePageNumber"`
					CreatureRules    []interface{} `json:"creatureRules"`
				} `json:"definition"`
				ComponentID     int `json:"componentId"`
				ComponentTypeID int `json:"componentTypeId"`
			} `json:"class"`
			Feat []interface{} `json:"feat"`
		} `json:"options"`
		Choices struct {
			Race []struct {
				ID              string        `json:"id"`
				ParentChoiceID  interface{}   `json:"parentChoiceId"`
				Type            int           `json:"type"`
				SubType         int           `json:"subType"`
				OptionValue     int           `json:"optionValue"`
				Label           string        `json:"label"`
				IsOptional      bool          `json:"isOptional"`
				IsInfinite      bool          `json:"isInfinite"`
				DefaultSubtypes []interface{} `json:"defaultSubtypes"`
				Options         []struct {
					ID          int         `json:"id"`
					Label       string      `json:"label"`
					Description interface{} `json:"description"`
				} `json:"options"`
				ComponentID     int `json:"componentId"`
				ComponentTypeID int `json:"componentTypeId"`
			} `json:"race"`
			Class []struct {
				ID              string        `json:"id"`
				ParentChoiceID  interface{}   `json:"parentChoiceId"`
				Type            int           `json:"type"`
				SubType         interface{}   `json:"subType"`
				OptionValue     int           `json:"optionValue"`
				Label           interface{}   `json:"label"`
				IsOptional      bool          `json:"isOptional"`
				IsInfinite      bool          `json:"isInfinite"`
				DefaultSubtypes []interface{} `json:"defaultSubtypes"`
				Options         []struct {
					ID          int    `json:"id"`
					Label       string `json:"label"`
					Description string `json:"description"`
				} `json:"options"`
				ComponentID     int `json:"componentId"`
				ComponentTypeID int `json:"componentTypeId"`
			} `json:"class"`
			Background []struct {
				ID              string        `json:"id"`
				ParentChoiceID  interface{}   `json:"parentChoiceId"`
				Type            int           `json:"type"`
				SubType         int           `json:"subType"`
				OptionValue     int           `json:"optionValue"`
				Label           string        `json:"label"`
				IsOptional      bool          `json:"isOptional"`
				IsInfinite      bool          `json:"isInfinite"`
				DefaultSubtypes []interface{} `json:"defaultSubtypes"`
				Options         []struct {
					ID          int         `json:"id"`
					Label       string      `json:"label"`
					Description interface{} `json:"description"`
				} `json:"options"`
				ComponentID     int `json:"componentId"`
				ComponentTypeID int `json:"componentTypeId"`
			} `json:"background"`
			Feat []interface{} `json:"feat"`
		} `json:"choices"`
		Actions struct {
			Race  []interface{} `json:"race"`
			Class []struct {
				ID           int `json:"id"`
				EntityTypeID int `json:"entityTypeId"`
				LimitedUse   struct {
					Name               interface{} `json:"name"`
					StatModifierUsesID interface{} `json:"statModifierUsesId"`
					ResetType          int         `json:"resetType"`
					NumberUsed         int         `json:"numberUsed"`
					MinNumberConsumed  int         `json:"minNumberConsumed"`
					MaxNumberConsumed  int         `json:"maxNumberConsumed"`
					MaxUses            int         `json:"maxUses"`
					Operator           int         `json:"operator"`
				} `json:"limitedUse"`
				Name                   string      `json:"name"`
				Description            string      `json:"description"`
				Snippet                string      `json:"snippet"`
				AbilityModifierStatID  interface{} `json:"abilityModifierStatId"`
				OnMissDescription      string      `json:"onMissDescription"`
				SaveFailDescription    string      `json:"saveFailDescription"`
				SaveSuccessDescription string      `json:"saveSuccessDescription"`
				SaveStatID             interface{} `json:"saveStatId"`
				FixedSaveDc            interface{} `json:"fixedSaveDc"`
				AttackTypeRange        interface{} `json:"attackTypeRange"`
				ActionType             int         `json:"actionType"`
				AttackSubtype          interface{} `json:"attackSubtype"`
				Dice                   interface{} `json:"dice"`
				Value                  interface{} `json:"value"`
				DamageTypeID           interface{} `json:"damageTypeId"`
				IsMartialArts          bool        `json:"isMartialArts"`
				IsProficient           bool        `json:"isProficient"`
				SpellRangeType         interface{} `json:"spellRangeType"`
				DisplayAsAttack        interface{} `json:"displayAsAttack"`
				Range                  struct {
					Range                    interface{} `json:"range"`
					LongRange                interface{} `json:"longRange"`
					AoeType                  interface{} `json:"aoeType"`
					AoeSize                  interface{} `json:"aoeSize"`
					HasAoeSpecialDescription bool        `json:"hasAoeSpecialDescription"`
				} `json:"range"`
				Activation struct {
					ActivationTime int `json:"activationTime"`
					ActivationType int `json:"activationType"`
				} `json:"activation"`
				AttackCustomData struct {
					Name            interface{} `json:"name"`
					Notes           interface{} `json:"notes"`
					DamageBonus     interface{} `json:"damageBonus"`
					ToHitBonus      interface{} `json:"toHitBonus"`
					ToHit           interface{} `json:"toHit"`
					IsOffhand       interface{} `json:"isOffhand"`
					IsSilver        interface{} `json:"isSilver"`
					IsAdamantine    interface{} `json:"isAdamantine"`
					IsProficient    interface{} `json:"isProficient"`
					SaveDcBonus     interface{} `json:"saveDcBonus"`
					SaveDc          interface{} `json:"saveDc"`
					Weight          interface{} `json:"weight"`
					DisplayAsAttack interface{} `json:"displayAsAttack"`
					Cost            interface{} `json:"cost"`
				} `json:"attackCustomData"`
				ComponentID     int `json:"componentId"`
				ComponentTypeID int `json:"componentTypeId"`
			} `json:"class"`
			Feat []interface{} `json:"feat"`
		} `json:"actions"`
		Modifiers struct {
			Race []struct {
				ID                  string        `json:"id"`
				EntityID            int           `json:"entityId"`
				EntityTypeID        int           `json:"entityTypeId"`
				Type                string        `json:"type"`
				SubType             string        `json:"subType"`
				Dice                interface{}   `json:"dice"`
				Restriction         string        `json:"restriction"`
				StatID              interface{}   `json:"statId"`
				RequiresAttunement  bool          `json:"requiresAttunement"`
				Duration            interface{}   `json:"duration"`
				FriendlyTypeName    string        `json:"friendlyTypeName"`
				FriendlySubtypeName string        `json:"friendlySubtypeName"`
				IsGranted           bool          `json:"isGranted"`
				BonusTypes          []interface{} `json:"bonusTypes"`
				Value               int           `json:"value"`
				ComponentID         int           `json:"componentId"`
				ComponentTypeID     int           `json:"componentTypeId"`
			} `json:"race"`
			Class []struct {
				ID                  string        `json:"id"`
				EntityID            int           `json:"entityId"`
				EntityTypeID        int           `json:"entityTypeId"`
				Type                string        `json:"type"`
				SubType             string        `json:"subType"`
				Dice                interface{}   `json:"dice"`
				Restriction         string        `json:"restriction"`
				StatID              interface{}   `json:"statId"`
				RequiresAttunement  bool          `json:"requiresAttunement"`
				Duration            interface{}   `json:"duration"`
				FriendlyTypeName    string        `json:"friendlyTypeName"`
				FriendlySubtypeName string        `json:"friendlySubtypeName"`
				IsGranted           bool          `json:"isGranted"`
				BonusTypes          []interface{} `json:"bonusTypes"`
				Value               interface{}   `json:"value"`
				ComponentID         int           `json:"componentId"`
				ComponentTypeID     int           `json:"componentTypeId"`
			} `json:"class"`
			Background []struct {
				ID                  string        `json:"id"`
				EntityID            int           `json:"entityId"`
				EntityTypeID        int           `json:"entityTypeId"`
				Type                string        `json:"type"`
				SubType             string        `json:"subType"`
				Dice                interface{}   `json:"dice"`
				Restriction         string        `json:"restriction"`
				StatID              interface{}   `json:"statId"`
				RequiresAttunement  bool          `json:"requiresAttunement"`
				Duration            interface{}   `json:"duration"`
				FriendlyTypeName    string        `json:"friendlyTypeName"`
				FriendlySubtypeName string        `json:"friendlySubtypeName"`
				IsGranted           bool          `json:"isGranted"`
				BonusTypes          []interface{} `json:"bonusTypes"`
				Value               interface{}   `json:"value"`
				ComponentID         int           `json:"componentId"`
				ComponentTypeID     int           `json:"componentTypeId"`
			} `json:"background"`
			Item      []interface{} `json:"item"`
			Feat      []interface{} `json:"feat"`
			Condition []interface{} `json:"condition"`
		} `json:"modifiers"`
		ClassSpells []struct {
			EntityTypeID     int `json:"entityTypeId"`
			CharacterClassID int `json:"characterClassId"`
			Spells           []struct {
				ID           int `json:"id"`
				EntityTypeID int `json:"entityTypeId"`
				Definition   struct {
					ID       int    `json:"id"`
					Name     string `json:"name"`
					Level    int    `json:"level"`
					School   string `json:"school"`
					Duration struct {
						DurationInterval int    `json:"durationInterval"`
						DurationUnit     string `json:"durationUnit"`
						DurationType     string `json:"durationType"`
					} `json:"duration"`
					Activation struct {
						ActivationTime int `json:"activationTime"`
						ActivationType int `json:"activationType"`
					} `json:"activation"`
					Range struct {
						Origin     string      `json:"origin"`
						RangeValue int         `json:"rangeValue"`
						AoeType    interface{} `json:"aoeType"`
						AoeValue   interface{} `json:"aoeValue"`
					} `json:"range"`
					AsPartOfWeaponAttack  bool        `json:"asPartOfWeaponAttack"`
					Description           string      `json:"description"`
					Snippet               string      `json:"snippet"`
					Concentration         bool        `json:"concentration"`
					Ritual                bool        `json:"ritual"`
					RangeArea             interface{} `json:"rangeArea"`
					DamageEffect          interface{} `json:"damageEffect"`
					Components            []int       `json:"components"`
					ComponentsDescription string      `json:"componentsDescription"`
					SaveDcAbilityID       interface{} `json:"saveDcAbilityId"`
					Healing               interface{} `json:"healing"`
					HealingDice           interface{} `json:"healingDice"`
					TempHpDice            interface{} `json:"tempHpDice"`
					AttackType            int         `json:"attackType"`
					CanCastAtHigherLevel  bool        `json:"canCastAtHigherLevel"`
					IsHomebrew            bool        `json:"isHomebrew"`
					Version               interface{} `json:"version"`
					SourceID              int         `json:"sourceId"`
					SourcePageNumber      int         `json:"sourcePageNumber"`
					RequiresSavingThrow   bool        `json:"requiresSavingThrow"`
					RequiresAttackRoll    bool        `json:"requiresAttackRoll"`
					AtHigherLevels        struct {
						ScaleType              string        `json:"scaleType"`
						HigherLevelDefinitions []interface{} `json:"higherLevelDefinitions"`
						AdditionalAttacks      []interface{} `json:"additionalAttacks"`
						AdditionalTargets      []interface{} `json:"additionalTargets"`
						AreaOfEffect           []interface{} `json:"areaOfEffect"`
						Duration               []interface{} `json:"duration"`
						Creatures              []interface{} `json:"creatures"`
						Special                []interface{} `json:"special"`
						Points                 []interface{} `json:"points"`
					} `json:"atHigherLevels"`
					Modifiers []struct {
						ID      string `json:"id"`
						Type    string `json:"type"`
						SubType string `json:"subType"`
						Die     struct {
							DiceCount      int         `json:"diceCount"`
							DiceValue      int         `json:"diceValue"`
							DiceMultiplier interface{} `json:"diceMultiplier"`
							FixedValue     interface{} `json:"fixedValue"`
							DiceString     string      `json:"diceString"`
						} `json:"die"`
						Count               int         `json:"count"`
						Duration            int         `json:"duration"`
						DurationUnit        interface{} `json:"durationUnit"`
						Restriction         string      `json:"restriction"`
						FriendlyTypeName    string      `json:"friendlyTypeName"`
						FriendlySubtypeName string      `json:"friendlySubtypeName"`
						UsePrimaryStat      bool        `json:"usePrimaryStat"`
						AtHigherLevels      struct {
							ScaleType              string `json:"scaleType"`
							HigherLevelDefinitions []struct {
								Level  int `json:"level"`
								TypeID int `json:"typeId"`
								Dice   struct {
									DiceCount      int         `json:"diceCount"`
									DiceValue      int         `json:"diceValue"`
									DiceMultiplier interface{} `json:"diceMultiplier"`
									FixedValue     int         `json:"fixedValue"`
									DiceString     string      `json:"diceString"`
								} `json:"dice"`
								Value   interface{} `json:"value"`
								Details string      `json:"details"`
							} `json:"higherLevelDefinitions"`
							AdditionalAttacks []interface{} `json:"additionalAttacks"`
							AdditionalTargets []interface{} `json:"additionalTargets"`
							AreaOfEffect      []interface{} `json:"areaOfEffect"`
							Duration          []interface{} `json:"duration"`
							Creatures         []interface{} `json:"creatures"`
							Special           []interface{} `json:"special"`
							Points            []struct {
								Die struct {
									DiceCount      int         `json:"diceCount"`
									DiceValue      int         `json:"diceValue"`
									DiceMultiplier interface{} `json:"diceMultiplier"`
									FixedValue     int         `json:"fixedValue"`
									DiceString     string      `json:"diceString"`
								} `json:"die"`
								Level       int    `json:"level"`
								Description string `json:"description"`
							} `json:"points"`
						} `json:"atHigherLevels"`
					} `json:"modifiers"`
					Conditions             []interface{} `json:"conditions"`
					Tags                   []string      `json:"tags"`
					CastingTimeDescription string        `json:"castingTimeDescription"`
				} `json:"definition"`
				Prepared              bool        `json:"prepared"`
				CountsAsKnownSpell    bool        `json:"countsAsKnownSpell"`
				UsesSpellSlot         bool        `json:"usesSpellSlot"`
				CastAtLevel           interface{} `json:"castAtLevel"`
				AlwaysPrepared        bool        `json:"alwaysPrepared"`
				Restriction           interface{} `json:"restriction"`
				SpellCastingAbilityID interface{} `json:"spellCastingAbilityId"`
				DisplayAsAttack       interface{} `json:"displayAsAttack"`
				AdditionalDescription interface{} `json:"additionalDescription"`
				CastOnlyAsRitual      bool        `json:"castOnlyAsRitual"`
				RitualCastingType     interface{} `json:"ritualCastingType"`
				Range                 struct {
					Origin     string      `json:"origin"`
					RangeValue int         `json:"rangeValue"`
					AoeType    interface{} `json:"aoeType"`
					AoeValue   interface{} `json:"aoeValue"`
				} `json:"range"`
				Activation struct {
					ActivationTime int `json:"activationTime"`
					ActivationType int `json:"activationType"`
				} `json:"activation"`
				BaseLevelAtWill       bool        `json:"baseLevelAtWill"`
				AtWillLimitedUseLevel interface{} `json:"atWillLimitedUseLevel"`
				ComponentID           int         `json:"componentId"`
				ComponentTypeID       int         `json:"componentTypeId"`
			} `json:"spells"`
		} `json:"classSpells"`
		CustomItems []interface{} `json:"customItems"`
		Campaign    interface{}   `json:"campaign"`
		Creatures   []struct {
			ID                 int         `json:"id"`
			EntityTypeID       int         `json:"entityTypeId"`
			Name               string      `json:"name"`
			Description        interface{} `json:"description"`
			IsActive           bool        `json:"isActive"`
			RemovedHitPoints   int         `json:"removedHitPoints"`
			TemporaryHitPoints interface{} `json:"temporaryHitPoints"`
			GroupID            int         `json:"groupId"`
			Definition         struct {
				Stats []struct {
					StatID int         `json:"statId"`
					Name   interface{} `json:"name"`
					Value  int         `json:"value"`
				} `json:"stats"`
				Senses []struct {
					SenseID int    `json:"senseId"`
					Notes   string `json:"notes"`
				} `json:"senses"`
				DamageAdjustments   []interface{} `json:"damageAdjustments"`
				ConditionImmunities []interface{} `json:"conditionImmunities"`
				SavingThrows        []struct {
					StatID        int         `json:"statId"`
					BonusModifier interface{} `json:"bonusModifier"`
				} `json:"savingThrows"`
				Skills []struct {
					SkillID         int `json:"skillId"`
					Value           int `json:"value"`
					AdditionalBonus int `json:"additionalBonus"`
				} `json:"skills"`
				Languages []struct {
					LanguageID int    `json:"languageId"`
					Notes      string `json:"notes"`
				} `json:"languages"`
				SpecialTraitsDescription    string `json:"specialTraitsDescription"`
				ActionsDescription          string `json:"actionsDescription"`
				ReactionsDescription        string `json:"reactionsDescription"`
				LegendaryActionsDescription string `json:"legendaryActionsDescription"`
				CharacteristicsDescription  string `json:"characteristicsDescription"`
				LairDescription             string `json:"lairDescription"`
				LanguageDescription         string `json:"languageDescription"`
				LanguageNote                string `json:"languageNote"`
				ID                          int    `json:"id"`
				EntityTypeID                int    `json:"entityTypeId"`
				Name                        string `json:"name"`
				AlignmentID                 int    `json:"alignmentId"`
				SizeID                      int    `json:"sizeId"`
				TypeID                      int    `json:"typeId"`
				ArmorClass                  int    `json:"armorClass"`
				ArmorClassDescription       string `json:"armorClassDescription"`
				AverageHitPoints            int    `json:"averageHitPoints"`
				HitPointDice                struct {
					DiceCount      int         `json:"diceCount"`
					DiceValue      int         `json:"diceValue"`
					DiceMultiplier interface{} `json:"diceMultiplier"`
					FixedValue     int         `json:"fixedValue"`
					DiceString     string      `json:"diceString"`
				} `json:"hitPointDice"`
				Movements []struct {
					MovementID int    `json:"movementId"`
					Speed      int    `json:"speed"`
					Notes      string `json:"notes"`
				} `json:"movements"`
				PassivePerception int           `json:"passivePerception"`
				IsHomebrew        bool          `json:"isHomebrew"`
				ChallengeRatingID int           `json:"challengeRatingId"`
				SourceID          int           `json:"sourceId"`
				SourcePageNumber  int           `json:"sourcePageNumber"`
				IsLegendary       bool          `json:"isLegendary"`
				HasLair           bool          `json:"hasLair"`
				AvatarURL         string        `json:"avatarUrl"`
				LargeAvatarURL    string        `json:"largeAvatarUrl"`
				BasicAvatarURL    string        `json:"basicAvatarUrl"`
				Version           interface{}   `json:"version"`
				Swarm             interface{}   `json:"swarm"`
				SubTypes          []interface{} `json:"subTypes"`
				Environments      []int         `json:"environments"`
				Tags              []interface{} `json:"tags"`
			} `json:"definition"`
		} `json:"creatures"`
		Vehicles   []interface{} `json:"vehicles"`
		Components []interface{} `json:"components"`
	} `json:"character"`
}
