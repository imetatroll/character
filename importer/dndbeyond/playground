the following works.  it appears that adding *js.Object to all structs should be ok...
need to test embedded situation (struct declared inside struct)

package main

import (
	"fmt"

	"github.com/gopherjs/gopherjs/js"
)

type Emb struct {
	*js.Object

	Ev int `js:"ev"`
}

type Arr struct {
	*js.Object

	Val string `js:"val"`
}

type Test struct {
	*js.Object

	Arrs []Arr `js:"arr"`
	Emb  Emb   `js:"emb"`
}

func main() {
	test := &Test{}

	val := "{\"arr\":[{\"val\":\"test\"}],\"emb\":{\"ev\":1}} "

	obj := js.Global.Get("JSON").Call("parse", val)
	test.Object = obj

	/*
		arr := &Arr{Object: js.Global.Get("Object").New()}
		arr.Val = "test"
		arrs := make([]*Arr, 0)
		arrs = append(arrs, arr)
		test.Arrs = arrs
	*/

	fmt.Printf("array keys %+v\n", js.Keys(obj.Get("arr")))

	fmt.Printf("internal array value of index 0: %+v\n", test.Get("arr").Index(0).Get("val"))

	fmt.Printf("array val: %s\n", test.Arrs[0].Val)
	fmt.Printf("emb val: %d\n", test.Emb.Ev)

	fmt.Printf("\n\n%s", js.Global.Get("JSON").Call("stringify", test))
}

------------------

embedded appears to be ok too:

package main

import (
	"fmt"

	"github.com/gopherjs/gopherjs/js"
)

type Emb struct {
	*js.Object

	Ev int `js:"ev"`
}

type Arr struct {
	*js.Object

	Val string `js:"val"`
}

type Test struct {
	*js.Object

	IsJsEnv bool

	Arrs []Arr `js:"arr"`
	Emb  struct {
		*js.Object

		Ev int `js:"ev"`
	} `js:"emb"`
}

func main() {
	test := &Test{}

	val := "{\"arr\":[{\"val\":\"test\"}],\"emb\":{\"ev\":1}} "

	obj := js.Global.Get("JSON").Call("parse", val)
	test.Object = obj

	test.IsJsEnv = true

	/*
		arr := &Arr{Object: js.Global.Get("Object").New()}
		arr.Val = "test"
		arrs := make([]*Arr, 0)
		arrs = append(arrs, arr)
		test.Arrs = arrs
	*/

	// fmt.Printf("array keys %+v\n", js.Keys(obj.Get("arr")))
	// fmt.Printf("internal array value of index 0: %+v\n", test.Get("arr").Index(0).Get("val"))

	fmt.Printf("IsJsEnv: %t\n", test.IsJsEnv)
	fmt.Printf("array val: %s\n", test.Arrs[0].Val)
	fmt.Printf("emb val: %d\n", test.Emb.Ev)

	fmt.Printf("\n\n%s", js.Global.Get("JSON").Call("stringify", test))
}

